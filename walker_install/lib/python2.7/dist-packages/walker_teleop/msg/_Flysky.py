# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from walker_teleop/Flysky.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Flysky(genpy.Message):
  _md5sum = "163a5835c0ba7d7356ed3e23c0843803"
  _type = "walker_teleop/Flysky"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# switch values
byte SW_UP=0
byte SW_DOWN=1
byte SW_MID=2

# switches, prefix 'b' for bool key, prefix 't' for triple state key
byte bSwa
byte bSwb
byte bSwc
byte bSwe
byte tSwf
byte bSwh

# directions
float32 DIR_MAX=100.0
float32 DIR_MIN=-100.0
float32 dir_lr
float32 dir_ud

# throttle
float32 throttle_lr
float32 throttle_ud

# whether all values are validate
bool valid

# whether the remoter is online or not
bool online

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  SW_UP = 0
  SW_DOWN = 1
  SW_MID = 2
  DIR_MAX = 100.0
  DIR_MIN = -100.0

  __slots__ = ['header','bSwa','bSwb','bSwc','bSwe','tSwf','bSwh','dir_lr','dir_ud','throttle_lr','throttle_ud','valid','online']
  _slot_types = ['std_msgs/Header','byte','byte','byte','byte','byte','byte','float32','float32','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,bSwa,bSwb,bSwc,bSwe,tSwf,bSwh,dir_lr,dir_ud,throttle_lr,throttle_ud,valid,online

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Flysky, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bSwa is None:
        self.bSwa = 0
      if self.bSwb is None:
        self.bSwb = 0
      if self.bSwc is None:
        self.bSwc = 0
      if self.bSwe is None:
        self.bSwe = 0
      if self.tSwf is None:
        self.tSwf = 0
      if self.bSwh is None:
        self.bSwh = 0
      if self.dir_lr is None:
        self.dir_lr = 0.
      if self.dir_ud is None:
        self.dir_ud = 0.
      if self.throttle_lr is None:
        self.throttle_lr = 0.
      if self.throttle_ud is None:
        self.throttle_ud = 0.
      if self.valid is None:
        self.valid = False
      if self.online is None:
        self.online = False
    else:
      self.header = std_msgs.msg.Header()
      self.bSwa = 0
      self.bSwb = 0
      self.bSwc = 0
      self.bSwe = 0
      self.tSwf = 0
      self.bSwh = 0
      self.dir_lr = 0.
      self.dir_ud = 0.
      self.throttle_lr = 0.
      self.throttle_ud = 0.
      self.valid = False
      self.online = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6b4f2B().pack(_x.bSwa, _x.bSwb, _x.bSwc, _x.bSwe, _x.tSwf, _x.bSwh, _x.dir_lr, _x.dir_ud, _x.throttle_lr, _x.throttle_ud, _x.valid, _x.online))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.bSwa, _x.bSwb, _x.bSwc, _x.bSwe, _x.tSwf, _x.bSwh, _x.dir_lr, _x.dir_ud, _x.throttle_lr, _x.throttle_ud, _x.valid, _x.online,) = _get_struct_6b4f2B().unpack(str[start:end])
      self.valid = bool(self.valid)
      self.online = bool(self.online)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6b4f2B().pack(_x.bSwa, _x.bSwb, _x.bSwc, _x.bSwe, _x.tSwf, _x.bSwh, _x.dir_lr, _x.dir_ud, _x.throttle_lr, _x.throttle_ud, _x.valid, _x.online))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.bSwa, _x.bSwb, _x.bSwc, _x.bSwe, _x.tSwf, _x.bSwh, _x.dir_lr, _x.dir_ud, _x.throttle_lr, _x.throttle_ud, _x.valid, _x.online,) = _get_struct_6b4f2B().unpack(str[start:end])
      self.valid = bool(self.valid)
      self.online = bool(self.online)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6b4f2B = None
def _get_struct_6b4f2B():
    global _struct_6b4f2B
    if _struct_6b4f2B is None:
        _struct_6b4f2B = struct.Struct("<6b4f2B")
    return _struct_6b4f2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
