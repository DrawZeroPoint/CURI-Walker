# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ces_task/TaskArmStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class TaskArmStatus(genpy.Message):
  _md5sum = "e37a2b08a580018c6dc8764166a54283"
  _type = "ces_task/TaskArmStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# owner ids
string OWNER_NONE=none
string OWNER_SDK=sdk
string OWNER_LEGS=legs
string OWNER_ARMS=arms
string OWNER_REMOTER=remoter
string OWNER_HOST=host


# task ids
## common task
string TASK_GREETINGS=CES/cesGreetings
string TASK_HANDSHAKE=function/functionHybirdEffort
string TASK_STANDBY=walk/walkDynamic
string TASK_CHARGE=CES/cesRecharge
string TASK_SWINGWHILEWALKE=walk/walkDynamic
string TASK_WALKINHAND=walk/walkDynamicWithHand
string TASK_DANCE=function/functionDance
string TASK_ENDPOINTCTRL=function/functionEndpointControl
string TASK_HYBIRDTRQCTRL=function/functionHybirdEffort
string TASK_HYBIRDPOSCTRL=function/functionHybirdPosition
string TASK_NULLSPACECTRL=function/functionNullspaceControl
string TASK_VISUALSERVO=function/functionVisualServo
string TASK_WHOLEBODYCTRL=function/functionWholeBodyControl
string TASK_DRAWING=function/functionDrawing
string TASK_SAYGOODBYE=CES/cesSayGoodbye

## open door task
string TASK_OPENDOOR=CES/ces100OpenDoor

## handle bag task
string TASK_GETBAG=CES/cesPickBag
string TASK_HANGBAG=CES/ces101PlaceBag

## get water task
string TASK_GETWATER=CES/ces102OpenRefrigerator
string TASK_PLACEWATER=CES/ces104PlaceWater
string TASK_WALKWITHWATER=walk/walkDynamic

## get food task
string TASK_GETFOOD=CES/ces103PickChips
string TASK_WALKWITHFOOD=walk/walkDynamic
string TASK_GIVEFOOD=CES/cesDeliveryChips
string TASK_RELEASEFOOD=CES/cesReleaseChips

## get umbrella task
string TASK_GETUMBRELLA=CES/ces105PickUmbrella
string TASK_GIVEUMBRELLA=CES/cesDeliveryUmbrella
string TASK_RELEASEUMBRELLA=CES/cesReleaseUmbrella


# task status defines
string TASK_STATUS_IDLE=idle
string TASK_STATUS_BUSY=busy
string TASK_STATUS_STOP=stopped
string TASK_STATUS_ABORT=abort
string TASK_STATUS_FAILED=fail

##############################################

# time stamp must be filled
Header header

# current task id
string task_id

# who send request
string demander

# who execute task
string executor

# current status
string task_status

# progress info(optional)
string process_info

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  OWNER_NONE = 'none'
  OWNER_SDK = 'sdk'
  OWNER_LEGS = 'legs'
  OWNER_ARMS = 'arms'
  OWNER_REMOTER = 'remoter'
  OWNER_HOST = 'host'
  TASK_GREETINGS = 'CES/cesGreetings'
  TASK_HANDSHAKE = 'function/functionHybirdEffort'
  TASK_STANDBY = 'walk/walkDynamic'
  TASK_CHARGE = 'CES/cesRecharge'
  TASK_SWINGWHILEWALKE = 'walk/walkDynamic'
  TASK_WALKINHAND = 'walk/walkDynamicWithHand'
  TASK_DANCE = 'function/functionDance'
  TASK_ENDPOINTCTRL = 'function/functionEndpointControl'
  TASK_HYBIRDTRQCTRL = 'function/functionHybirdEffort'
  TASK_HYBIRDPOSCTRL = 'function/functionHybirdPosition'
  TASK_NULLSPACECTRL = 'function/functionNullspaceControl'
  TASK_VISUALSERVO = 'function/functionVisualServo'
  TASK_WHOLEBODYCTRL = 'function/functionWholeBodyControl'
  TASK_DRAWING = 'function/functionDrawing'
  TASK_SAYGOODBYE = 'CES/cesSayGoodbye'
  TASK_OPENDOOR = 'CES/ces100OpenDoor'
  TASK_GETBAG = 'CES/cesPickBag'
  TASK_HANGBAG = 'CES/ces101PlaceBag'
  TASK_GETWATER = 'CES/ces102OpenRefrigerator'
  TASK_PLACEWATER = 'CES/ces104PlaceWater'
  TASK_WALKWITHWATER = 'walk/walkDynamic'
  TASK_GETFOOD = 'CES/ces103PickChips'
  TASK_WALKWITHFOOD = 'walk/walkDynamic'
  TASK_GIVEFOOD = 'CES/cesDeliveryChips'
  TASK_RELEASEFOOD = 'CES/cesReleaseChips'
  TASK_GETUMBRELLA = 'CES/ces105PickUmbrella'
  TASK_GIVEUMBRELLA = 'CES/cesDeliveryUmbrella'
  TASK_RELEASEUMBRELLA = 'CES/cesReleaseUmbrella'
  TASK_STATUS_IDLE = 'idle'
  TASK_STATUS_BUSY = 'busy'
  TASK_STATUS_STOP = 'stopped'
  TASK_STATUS_ABORT = 'abort'
  TASK_STATUS_FAILED = 'fail'

  __slots__ = ['header','task_id','demander','executor','task_status','process_info']
  _slot_types = ['std_msgs/Header','string','string','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,task_id,demander,executor,task_status,process_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskArmStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.task_id is None:
        self.task_id = ''
      if self.demander is None:
        self.demander = ''
      if self.executor is None:
        self.executor = ''
      if self.task_status is None:
        self.task_status = ''
      if self.process_info is None:
        self.process_info = ''
    else:
      self.header = std_msgs.msg.Header()
      self.task_id = ''
      self.demander = ''
      self.executor = ''
      self.task_status = ''
      self.process_info = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.demander
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.executor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.task_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.process_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_id = str[start:end].decode('utf-8')
      else:
        self.task_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.demander = str[start:end].decode('utf-8')
      else:
        self.demander = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.executor = str[start:end].decode('utf-8')
      else:
        self.executor = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_status = str[start:end].decode('utf-8')
      else:
        self.task_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.process_info = str[start:end].decode('utf-8')
      else:
        self.process_info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.demander
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.executor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.task_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.process_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_id = str[start:end].decode('utf-8')
      else:
        self.task_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.demander = str[start:end].decode('utf-8')
      else:
        self.demander = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.executor = str[start:end].decode('utf-8')
      else:
        self.executor = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_status = str[start:end].decode('utf-8')
      else:
        self.task_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.process_info = str[start:end].decode('utf-8')
      else:
        self.process_info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
