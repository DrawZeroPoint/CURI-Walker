# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cruiser_msgs/uwbCoordinateMapRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class uwbCoordinateMapRequest(genpy.Message):
  _md5sum = "7f6018a742f32b139af5bdf538b4633a"
  _type = "cruiser_msgs/uwbCoordinateMapRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 intput_x
float32 intput_y
float32 intput_theta
bool theta_valid_flag
"""
  __slots__ = ['intput_x','intput_y','intput_theta','theta_valid_flag']
  _slot_types = ['float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       intput_x,intput_y,intput_theta,theta_valid_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(uwbCoordinateMapRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.intput_x is None:
        self.intput_x = 0.
      if self.intput_y is None:
        self.intput_y = 0.
      if self.intput_theta is None:
        self.intput_theta = 0.
      if self.theta_valid_flag is None:
        self.theta_valid_flag = False
    else:
      self.intput_x = 0.
      self.intput_y = 0.
      self.intput_theta = 0.
      self.theta_valid_flag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fB().pack(_x.intput_x, _x.intput_y, _x.intput_theta, _x.theta_valid_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.intput_x, _x.intput_y, _x.intput_theta, _x.theta_valid_flag,) = _get_struct_3fB().unpack(str[start:end])
      self.theta_valid_flag = bool(self.theta_valid_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fB().pack(_x.intput_x, _x.intput_y, _x.intput_theta, _x.theta_valid_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.intput_x, _x.intput_y, _x.intput_theta, _x.theta_valid_flag,) = _get_struct_3fB().unpack(str[start:end])
      self.theta_valid_flag = bool(self.theta_valid_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fB = None
def _get_struct_3fB():
    global _struct_3fB
    if _struct_3fB is None:
        _struct_3fB = struct.Struct("<3fB")
    return _struct_3fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cruiser_msgs/uwbCoordinateMapResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class uwbCoordinateMapResponse(genpy.Message):
  _md5sum = "b33e9bd7010c42d2771bcf6ee2749245"
  _type = "cruiser_msgs/uwbCoordinateMapResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 result
float32 output_x
float32 output_y
float32 output_theta


"""
  __slots__ = ['result','output_x','output_y','output_theta']
  _slot_types = ['uint32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,output_x,output_y,output_theta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(uwbCoordinateMapResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
      if self.output_x is None:
        self.output_x = 0.
      if self.output_y is None:
        self.output_y = 0.
      if self.output_theta is None:
        self.output_theta = 0.
    else:
      self.result = 0
      self.output_x = 0.
      self.output_y = 0.
      self.output_theta = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I3f().pack(_x.result, _x.output_x, _x.output_y, _x.output_theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.result, _x.output_x, _x.output_y, _x.output_theta,) = _get_struct_I3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I3f().pack(_x.result, _x.output_x, _x.output_y, _x.output_theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.result, _x.output_x, _x.output_y, _x.output_theta,) = _get_struct_I3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I3f = None
def _get_struct_I3f():
    global _struct_I3f
    if _struct_I3f is None:
        _struct_I3f = struct.Struct("<I3f")
    return _struct_I3f
class uwbCoordinateMap(object):
  _type          = 'cruiser_msgs/uwbCoordinateMap'
  _md5sum = '795d5cb78f54a9363452cba320578b0f'
  _request_class  = uwbCoordinateMapRequest
  _response_class = uwbCoordinateMapResponse
