# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cruiser_msgs/motion_srvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motion_srvRequest(genpy.Message):
  _md5sum = "5664711c84c4775f891ad12ba2520f64"
  _type = "cruiser_msgs/motion_srvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


















int32 command


int32[3] data

string actionName

int32[1024] writetime

float64[16] targetJointPosition

"""
  __slots__ = ['command','data','actionName','writetime','targetJointPosition']
  _slot_types = ['int32','int32[3]','string','int32[1024]','float64[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,data,actionName,writetime,targetJointPosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motion_srvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = 0
      if self.data is None:
        self.data = [0] * 3
      if self.actionName is None:
        self.actionName = ''
      if self.writetime is None:
        self.writetime = [0] * 1024
      if self.targetJointPosition is None:
        self.targetJointPosition = [0.] * 16
    else:
      self.command = 0
      self.data = [0] * 3
      self.actionName = ''
      self.writetime = [0] * 1024
      self.targetJointPosition = [0.] * 16

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.command))
      buff.write(_get_struct_3i().pack(*self.data))
      _x = self.actionName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_1024i().pack(*self.writetime))
      buff.write(_get_struct_16d().pack(*self.targetJointPosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.command,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 12
      self.data = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actionName = str[start:end].decode('utf-8')
      else:
        self.actionName = str[start:end]
      start = end
      end += 4096
      self.writetime = _get_struct_1024i().unpack(str[start:end])
      start = end
      end += 128
      self.targetJointPosition = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.command))
      buff.write(self.data.tostring())
      _x = self.actionName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.writetime.tostring())
      buff.write(self.targetJointPosition.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.command,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 12
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actionName = str[start:end].decode('utf-8')
      else:
        self.actionName = str[start:end]
      start = end
      end += 4096
      self.writetime = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=1024)
      start = end
      end += 128
      self.targetJointPosition = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_1024i = None
def _get_struct_1024i():
    global _struct_1024i
    if _struct_1024i is None:
        _struct_1024i = struct.Struct("<1024i")
    return _struct_1024i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cruiser_msgs/motion_srvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motion_srvResponse(genpy.Message):
  _md5sum = "2ce250692c803104fdc0bc22bac3888f"
  _type = "cruiser_msgs/motion_srvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 result
int32[1024] readtime

int32 duration
float64[16] currentJointPosition

"""
  __slots__ = ['result','readtime','duration','currentJointPosition']
  _slot_types = ['int32','int32[1024]','int32','float64[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,readtime,duration,currentJointPosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motion_srvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
      if self.readtime is None:
        self.readtime = [0] * 1024
      if self.duration is None:
        self.duration = 0
      if self.currentJointPosition is None:
        self.currentJointPosition = [0.] * 16
    else:
      self.result = 0
      self.readtime = [0] * 1024
      self.duration = 0
      self.currentJointPosition = [0.] * 16

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.result))
      buff.write(_get_struct_1024i().pack(*self.readtime))
      buff.write(_get_struct_i().pack(self.duration))
      buff.write(_get_struct_16d().pack(*self.currentJointPosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.result,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4096
      self.readtime = _get_struct_1024i().unpack(str[start:end])
      start = end
      end += 4
      (self.duration,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 128
      self.currentJointPosition = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.result))
      buff.write(self.readtime.tostring())
      buff.write(_get_struct_i().pack(self.duration))
      buff.write(self.currentJointPosition.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.result,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4096
      self.readtime = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=1024)
      start = end
      end += 4
      (self.duration,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 128
      self.currentJointPosition = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
_struct_1024i = None
def _get_struct_1024i():
    global _struct_1024i
    if _struct_1024i is None:
        _struct_1024i = struct.Struct("<1024i")
    return _struct_1024i
class motion_srv(object):
  _type          = 'cruiser_msgs/motion_srv'
  _md5sum = 'e17f72359ddf3560f0cea3ec62c3ae72'
  _request_class  = motion_srvRequest
  _response_class = motion_srvResponse
