# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cruiser_msgs/cruiserSensorAltrasonic.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cruiserSensorAltrasonic(genpy.Message):
  _md5sum = "52802149de24fd2581b097f77f88a09b"
  _type = "cruiser_msgs/cruiserSensorAltrasonic"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 distance1
uint32 distance2
uint32 distance3
uint32 distance4
uint32 distance5
uint32 distance6

uint32 waist_distance1
uint32 waist_distance2
uint32 waist_distance3
uint32 waist_distance4
uint32 waist_distance5
uint32 waist_distance6

uint32 waist_microwave


"""
  __slots__ = ['distance1','distance2','distance3','distance4','distance5','distance6','waist_distance1','waist_distance2','waist_distance3','waist_distance4','waist_distance5','waist_distance6','waist_microwave']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       distance1,distance2,distance3,distance4,distance5,distance6,waist_distance1,waist_distance2,waist_distance3,waist_distance4,waist_distance5,waist_distance6,waist_microwave

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cruiserSensorAltrasonic, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.distance1 is None:
        self.distance1 = 0
      if self.distance2 is None:
        self.distance2 = 0
      if self.distance3 is None:
        self.distance3 = 0
      if self.distance4 is None:
        self.distance4 = 0
      if self.distance5 is None:
        self.distance5 = 0
      if self.distance6 is None:
        self.distance6 = 0
      if self.waist_distance1 is None:
        self.waist_distance1 = 0
      if self.waist_distance2 is None:
        self.waist_distance2 = 0
      if self.waist_distance3 is None:
        self.waist_distance3 = 0
      if self.waist_distance4 is None:
        self.waist_distance4 = 0
      if self.waist_distance5 is None:
        self.waist_distance5 = 0
      if self.waist_distance6 is None:
        self.waist_distance6 = 0
      if self.waist_microwave is None:
        self.waist_microwave = 0
    else:
      self.distance1 = 0
      self.distance2 = 0
      self.distance3 = 0
      self.distance4 = 0
      self.distance5 = 0
      self.distance6 = 0
      self.waist_distance1 = 0
      self.waist_distance2 = 0
      self.waist_distance3 = 0
      self.waist_distance4 = 0
      self.waist_distance5 = 0
      self.waist_distance6 = 0
      self.waist_microwave = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13I().pack(_x.distance1, _x.distance2, _x.distance3, _x.distance4, _x.distance5, _x.distance6, _x.waist_distance1, _x.waist_distance2, _x.waist_distance3, _x.waist_distance4, _x.waist_distance5, _x.waist_distance6, _x.waist_microwave))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.distance1, _x.distance2, _x.distance3, _x.distance4, _x.distance5, _x.distance6, _x.waist_distance1, _x.waist_distance2, _x.waist_distance3, _x.waist_distance4, _x.waist_distance5, _x.waist_distance6, _x.waist_microwave,) = _get_struct_13I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13I().pack(_x.distance1, _x.distance2, _x.distance3, _x.distance4, _x.distance5, _x.distance6, _x.waist_distance1, _x.waist_distance2, _x.waist_distance3, _x.waist_distance4, _x.waist_distance5, _x.waist_distance6, _x.waist_microwave))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.distance1, _x.distance2, _x.distance3, _x.distance4, _x.distance5, _x.distance6, _x.waist_distance1, _x.waist_distance2, _x.waist_distance3, _x.waist_distance4, _x.waist_distance5, _x.waist_distance6, _x.waist_microwave,) = _get_struct_13I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13I = None
def _get_struct_13I():
    global _struct_13I
    if _struct_13I is None:
        _struct_13I = struct.Struct("<13I")
    return _struct_13I
