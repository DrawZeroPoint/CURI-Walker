// Generated by gencpp from file walker_msgs/ces_task_Status.msg
// DO NOT EDIT!


#ifndef WALKER_MSGS_MESSAGE_CES_TASK_STATUS_H
#define WALKER_MSGS_MESSAGE_CES_TASK_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace walker_msgs
{
template <class ContainerAllocator>
struct ces_task_Status_
{
  typedef ces_task_Status_<ContainerAllocator> Type;

  ces_task_Status_()
    : header()
    , show_name()
    , show_mode()
    , group_queue()
    , group()
    , task()
    , progress()
    , waiting_trigger(false)
    , retrying(false)  {
    }
  ces_task_Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , show_name(_alloc)
    , show_mode(_alloc)
    , group_queue()
    , group(_alloc)
    , task(_alloc)
    , progress(_alloc)
    , waiting_trigger(false)
    , retrying(false)  {
      group_queue.assign(std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _show_name_type;
  _show_name_type show_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _show_mode_type;
  _show_mode_type show_mode;

   typedef boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 3>  _group_queue_type;
  _group_queue_type group_queue;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_type;
  _group_type group;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_type;
  _task_type task;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _progress_type;
  _progress_type progress;

   typedef uint8_t _waiting_trigger_type;
  _waiting_trigger_type waiting_trigger;

   typedef uint8_t _retrying_type;
  _retrying_type retrying;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_FREERUN)
  #undef MODE_FREERUN
#endif
#if defined(_WIN32) && defined(MODE_CONTINOUS)
  #undef MODE_CONTINOUS
#endif
#if defined(_WIN32) && defined(MODE_ONESHOT)
  #undef MODE_ONESHOT
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MODE_FREERUN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MODE_CONTINOUS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MODE_ONESHOT;

  typedef boost::shared_ptr< ::walker_msgs::ces_task_Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walker_msgs::ces_task_Status_<ContainerAllocator> const> ConstPtr;

}; // struct ces_task_Status_

typedef ::walker_msgs::ces_task_Status_<std::allocator<void> > ces_task_Status;

typedef boost::shared_ptr< ::walker_msgs::ces_task_Status > ces_task_StatusPtr;
typedef boost::shared_ptr< ::walker_msgs::ces_task_Status const> ces_task_StatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ces_task_Status_<ContainerAllocator>::MODE_FREERUN =
        
          "freerun"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ces_task_Status_<ContainerAllocator>::MODE_CONTINOUS =
        
          "continous"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ces_task_Status_<ContainerAllocator>::MODE_ONESHOT =
        
          "oneshot"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walker_msgs::ces_task_Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walker_msgs::ces_task_Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::walker_msgs::ces_task_Status_<ContainerAllocator1> & lhs, const ::walker_msgs::ces_task_Status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.show_name == rhs.show_name &&
    lhs.show_mode == rhs.show_mode &&
    lhs.group_queue == rhs.group_queue &&
    lhs.group == rhs.group &&
    lhs.task == rhs.task &&
    lhs.progress == rhs.progress &&
    lhs.waiting_trigger == rhs.waiting_trigger &&
    lhs.retrying == rhs.retrying;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::walker_msgs::ces_task_Status_<ContainerAllocator1> & lhs, const ::walker_msgs::ces_task_Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace walker_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::walker_msgs::ces_task_Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walker_msgs::ces_task_Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_msgs::ces_task_Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_msgs::ces_task_Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_msgs::ces_task_Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_msgs::ces_task_Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walker_msgs::ces_task_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "563be51c3a034bac36abd5adb57e46db";
  }

  static const char* value(const ::walker_msgs::ces_task_Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x563be51c3a034bacULL;
  static const uint64_t static_value2 = 0x36abd5adb57e46dbULL;
};

template<class ContainerAllocator>
struct DataType< ::walker_msgs::ces_task_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walker_msgs/ces_task_Status";
  }

  static const char* value(const ::walker_msgs::ces_task_Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walker_msgs::ces_task_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# task status defines\n"
"string MODE_FREERUN=freerun\n"
"string MODE_CONTINOUS=continous\n"
"string MODE_ONESHOT=oneshot\n"
"\n"
"##############################################\n"
"\n"
"# time stamp must be filled\n"
"Header header\n"
"\n"
"# current show name\n"
"string show_name\n"
"\n"
"# current run mode\n"
"string show_mode\n"
"\n"
"# task queue\n"
"string[3] group_queue\n"
"\n"
"# current group\n"
"string group\n"
"\n"
"# current task\n"
"string task\n"
"\n"
"# progress\n"
"string progress\n"
"\n"
"# wait for trigger flag\n"
"bool waiting_trigger\n"
"\n"
"# retrying\n"
"bool retrying\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::walker_msgs::ces_task_Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walker_msgs::ces_task_Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.show_name);
      stream.next(m.show_mode);
      stream.next(m.group_queue);
      stream.next(m.group);
      stream.next(m.task);
      stream.next(m.progress);
      stream.next(m.waiting_trigger);
      stream.next(m.retrying);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ces_task_Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walker_msgs::ces_task_Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walker_msgs::ces_task_Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "show_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.show_name);
    s << indent << "show_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.show_mode);
    s << indent << "group_queue[]" << std::endl;
    for (size_t i = 0; i < v.group_queue.size(); ++i)
    {
      s << indent << "  group_queue[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group_queue[i]);
    }
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group);
    s << indent << "task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task);
    s << indent << "progress: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.progress);
    s << indent << "waiting_trigger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waiting_trigger);
    s << indent << "retrying: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.retrying);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKER_MSGS_MESSAGE_CES_TASK_STATUS_H
