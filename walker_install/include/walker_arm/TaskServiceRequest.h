// Generated by gencpp from file walker_arm/TaskServiceRequest.msg
// DO NOT EDIT!


#ifndef WALKER_ARM_MESSAGE_TASKSERVICEREQUEST_H
#define WALKER_ARM_MESSAGE_TASKSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace walker_arm
{
template <class ContainerAllocator>
struct TaskServiceRequest_
{
  typedef TaskServiceRequest_<ContainerAllocator> Type;

  TaskServiceRequest_()
    : taskName()
    , taskEnable(false)
    , useJointOTG()
    , useCartOTG()
    , securityDection()
    , collisionDetection()  {
    }
  TaskServiceRequest_(const ContainerAllocator& _alloc)
    : taskName(_alloc)
    , taskEnable(false)
    , useJointOTG(_alloc)
    , useCartOTG(_alloc)
    , securityDection(_alloc)
    , collisionDetection(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskName_type;
  _taskName_type taskName;

   typedef uint8_t _taskEnable_type;
  _taskEnable_type taskEnable;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _useJointOTG_type;
  _useJointOTG_type useJointOTG;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _useCartOTG_type;
  _useCartOTG_type useCartOTG;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _securityDection_type;
  _securityDection_type securityDection;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _collisionDetection_type;
  _collisionDetection_type collisionDetection;





  typedef boost::shared_ptr< ::walker_arm::TaskServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walker_arm::TaskServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TaskServiceRequest_

typedef ::walker_arm::TaskServiceRequest_<std::allocator<void> > TaskServiceRequest;

typedef boost::shared_ptr< ::walker_arm::TaskServiceRequest > TaskServiceRequestPtr;
typedef boost::shared_ptr< ::walker_arm::TaskServiceRequest const> TaskServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walker_arm::TaskServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::walker_arm::TaskServiceRequest_<ContainerAllocator1> & lhs, const ::walker_arm::TaskServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.taskName == rhs.taskName &&
    lhs.taskEnable == rhs.taskEnable &&
    lhs.useJointOTG == rhs.useJointOTG &&
    lhs.useCartOTG == rhs.useCartOTG &&
    lhs.securityDection == rhs.securityDection &&
    lhs.collisionDetection == rhs.collisionDetection;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::walker_arm::TaskServiceRequest_<ContainerAllocator1> & lhs, const ::walker_arm::TaskServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace walker_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walker_arm::TaskServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_arm::TaskServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_arm::TaskServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2578414395b78e4280493cdc6999b7cd";
  }

  static const char* value(const ::walker_arm::TaskServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2578414395b78e42ULL;
  static const uint64_t static_value2 = 0x80493cdc6999b7cdULL;
};

template<class ContainerAllocator>
struct DataType< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walker_arm/TaskServiceRequest";
  }

  static const char* value(const ::walker_arm::TaskServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string taskName\n"
"bool taskEnable\n"
"bool[] useJointOTG\n"
"bool[] useCartOTG\n"
"bool[] securityDection\n"
"bool[] collisionDetection\n"
"\n"
;
  }

  static const char* value(const ::walker_arm::TaskServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.taskName);
      stream.next(m.taskEnable);
      stream.next(m.useJointOTG);
      stream.next(m.useCartOTG);
      stream.next(m.securityDection);
      stream.next(m.collisionDetection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walker_arm::TaskServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walker_arm::TaskServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "taskName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.taskName);
    s << indent << "taskEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.taskEnable);
    s << indent << "useJointOTG[]" << std::endl;
    for (size_t i = 0; i < v.useJointOTG.size(); ++i)
    {
      s << indent << "  useJointOTG[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.useJointOTG[i]);
    }
    s << indent << "useCartOTG[]" << std::endl;
    for (size_t i = 0; i < v.useCartOTG.size(); ++i)
    {
      s << indent << "  useCartOTG[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.useCartOTG[i]);
    }
    s << indent << "securityDection[]" << std::endl;
    for (size_t i = 0; i < v.securityDection.size(); ++i)
    {
      s << indent << "  securityDection[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.securityDection[i]);
    }
    s << indent << "collisionDetection[]" << std::endl;
    for (size_t i = 0; i < v.collisionDetection.size(); ++i)
    {
      s << indent << "  collisionDetection[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.collisionDetection[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKER_ARM_MESSAGE_TASKSERVICEREQUEST_H
