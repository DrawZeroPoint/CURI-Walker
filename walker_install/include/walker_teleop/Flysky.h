// Generated by gencpp from file walker_teleop/Flysky.msg
// DO NOT EDIT!


#ifndef WALKER_TELEOP_MESSAGE_FLYSKY_H
#define WALKER_TELEOP_MESSAGE_FLYSKY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace walker_teleop
{
template <class ContainerAllocator>
struct Flysky_
{
  typedef Flysky_<ContainerAllocator> Type;

  Flysky_()
    : header()
    , bSwa(0)
    , bSwb(0)
    , bSwc(0)
    , bSwe(0)
    , tSwf(0)
    , bSwh(0)
    , dir_lr(0.0)
    , dir_ud(0.0)
    , throttle_lr(0.0)
    , throttle_ud(0.0)
    , valid(false)
    , online(false)  {
    }
  Flysky_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , bSwa(0)
    , bSwb(0)
    , bSwc(0)
    , bSwe(0)
    , tSwf(0)
    , bSwh(0)
    , dir_lr(0.0)
    , dir_ud(0.0)
    , throttle_lr(0.0)
    , throttle_ud(0.0)
    , valid(false)
    , online(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _bSwa_type;
  _bSwa_type bSwa;

   typedef int8_t _bSwb_type;
  _bSwb_type bSwb;

   typedef int8_t _bSwc_type;
  _bSwc_type bSwc;

   typedef int8_t _bSwe_type;
  _bSwe_type bSwe;

   typedef int8_t _tSwf_type;
  _tSwf_type tSwf;

   typedef int8_t _bSwh_type;
  _bSwh_type bSwh;

   typedef float _dir_lr_type;
  _dir_lr_type dir_lr;

   typedef float _dir_ud_type;
  _dir_ud_type dir_ud;

   typedef float _throttle_lr_type;
  _throttle_lr_type throttle_lr;

   typedef float _throttle_ud_type;
  _throttle_ud_type throttle_ud;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint8_t _online_type;
  _online_type online;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SW_UP)
  #undef SW_UP
#endif
#if defined(_WIN32) && defined(SW_DOWN)
  #undef SW_DOWN
#endif
#if defined(_WIN32) && defined(SW_MID)
  #undef SW_MID
#endif
#if defined(_WIN32) && defined(DIR_MAX)
  #undef DIR_MAX
#endif
#if defined(_WIN32) && defined(DIR_MIN)
  #undef DIR_MIN
#endif

  enum {
    SW_UP = 0,
    SW_DOWN = 1,
    SW_MID = 2,
  };

  static const float DIR_MAX;
  static const float DIR_MIN;

  typedef boost::shared_ptr< ::walker_teleop::Flysky_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walker_teleop::Flysky_<ContainerAllocator> const> ConstPtr;

}; // struct Flysky_

typedef ::walker_teleop::Flysky_<std::allocator<void> > Flysky;

typedef boost::shared_ptr< ::walker_teleop::Flysky > FlyskyPtr;
typedef boost::shared_ptr< ::walker_teleop::Flysky const> FlyskyConstPtr;

// constants requiring out of line definition

   

   

   

   
   template<typename ContainerAllocator> const float
      Flysky_<ContainerAllocator>::DIR_MAX =
        
          100.0
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Flysky_<ContainerAllocator>::DIR_MIN =
        
          -100.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walker_teleop::Flysky_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walker_teleop::Flysky_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::walker_teleop::Flysky_<ContainerAllocator1> & lhs, const ::walker_teleop::Flysky_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.bSwa == rhs.bSwa &&
    lhs.bSwb == rhs.bSwb &&
    lhs.bSwc == rhs.bSwc &&
    lhs.bSwe == rhs.bSwe &&
    lhs.tSwf == rhs.tSwf &&
    lhs.bSwh == rhs.bSwh &&
    lhs.dir_lr == rhs.dir_lr &&
    lhs.dir_ud == rhs.dir_ud &&
    lhs.throttle_lr == rhs.throttle_lr &&
    lhs.throttle_ud == rhs.throttle_ud &&
    lhs.valid == rhs.valid &&
    lhs.online == rhs.online;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::walker_teleop::Flysky_<ContainerAllocator1> & lhs, const ::walker_teleop::Flysky_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace walker_teleop

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::walker_teleop::Flysky_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walker_teleop::Flysky_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_teleop::Flysky_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_teleop::Flysky_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_teleop::Flysky_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_teleop::Flysky_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walker_teleop::Flysky_<ContainerAllocator> >
{
  static const char* value()
  {
    return "163a5835c0ba7d7356ed3e23c0843803";
  }

  static const char* value(const ::walker_teleop::Flysky_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x163a5835c0ba7d73ULL;
  static const uint64_t static_value2 = 0x56ed3e23c0843803ULL;
};

template<class ContainerAllocator>
struct DataType< ::walker_teleop::Flysky_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walker_teleop/Flysky";
  }

  static const char* value(const ::walker_teleop::Flysky_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walker_teleop::Flysky_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# switch values\n"
"byte SW_UP=0\n"
"byte SW_DOWN=1\n"
"byte SW_MID=2\n"
"\n"
"# switches, prefix 'b' for bool key, prefix 't' for triple state key\n"
"byte bSwa\n"
"byte bSwb\n"
"byte bSwc\n"
"byte bSwe\n"
"byte tSwf\n"
"byte bSwh\n"
"\n"
"# directions\n"
"float32 DIR_MAX=100.0\n"
"float32 DIR_MIN=-100.0\n"
"float32 dir_lr\n"
"float32 dir_ud\n"
"\n"
"# throttle\n"
"float32 throttle_lr\n"
"float32 throttle_ud\n"
"\n"
"# whether all values are validate\n"
"bool valid\n"
"\n"
"# whether the remoter is online or not\n"
"bool online\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::walker_teleop::Flysky_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walker_teleop::Flysky_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.bSwa);
      stream.next(m.bSwb);
      stream.next(m.bSwc);
      stream.next(m.bSwe);
      stream.next(m.tSwf);
      stream.next(m.bSwh);
      stream.next(m.dir_lr);
      stream.next(m.dir_ud);
      stream.next(m.throttle_lr);
      stream.next(m.throttle_ud);
      stream.next(m.valid);
      stream.next(m.online);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Flysky_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walker_teleop::Flysky_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walker_teleop::Flysky_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "bSwa: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bSwa);
    s << indent << "bSwb: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bSwb);
    s << indent << "bSwc: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bSwc);
    s << indent << "bSwe: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bSwe);
    s << indent << "tSwf: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tSwf);
    s << indent << "bSwh: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bSwh);
    s << indent << "dir_lr: ";
    Printer<float>::stream(s, indent + "  ", v.dir_lr);
    s << indent << "dir_ud: ";
    Printer<float>::stream(s, indent + "  ", v.dir_ud);
    s << indent << "throttle_lr: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_lr);
    s << indent << "throttle_ud: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_ud);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "online: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.online);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKER_TELEOP_MESSAGE_FLYSKY_H
