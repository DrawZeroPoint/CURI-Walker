// Generated by gencpp from file logger/configureRequest.msg
// DO NOT EDIT!


#ifndef LOGGER_MESSAGE_CONFIGUREREQUEST_H
#define LOGGER_MESSAGE_CONFIGUREREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace logger
{
template <class ContainerAllocator>
struct configureRequest_
{
  typedef configureRequest_<ContainerAllocator> Type;

  configureRequest_()
    : node()
    , mode()
    , capacity(0)
    , path()  {
    }
  configureRequest_(const ContainerAllocator& _alloc)
    : node(_alloc)
    , mode(_alloc)
    , capacity(0)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_type;
  _node_type node;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef int32_t _capacity_type;
  _capacity_type capacity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_type;
  _path_type path;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_QUERY)
  #undef MODE_QUERY
#endif
#if defined(_WIN32) && defined(MODE_SET_CAPACITY)
  #undef MODE_SET_CAPACITY
#endif
#if defined(_WIN32) && defined(MODE_SET_PATH)
  #undef MODE_SET_PATH
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MODE_QUERY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MODE_SET_CAPACITY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MODE_SET_PATH;

  typedef boost::shared_ptr< ::logger::configureRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::logger::configureRequest_<ContainerAllocator> const> ConstPtr;

}; // struct configureRequest_

typedef ::logger::configureRequest_<std::allocator<void> > configureRequest;

typedef boost::shared_ptr< ::logger::configureRequest > configureRequestPtr;
typedef boost::shared_ptr< ::logger::configureRequest const> configureRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      configureRequest_<ContainerAllocator>::MODE_QUERY =
        
          "query"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      configureRequest_<ContainerAllocator>::MODE_SET_CAPACITY =
        
          "set_capacity"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      configureRequest_<ContainerAllocator>::MODE_SET_PATH =
        
          "set_path"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::logger::configureRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::logger::configureRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::logger::configureRequest_<ContainerAllocator1> & lhs, const ::logger::configureRequest_<ContainerAllocator2> & rhs)
{
  return lhs.node == rhs.node &&
    lhs.mode == rhs.mode &&
    lhs.capacity == rhs.capacity &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::logger::configureRequest_<ContainerAllocator1> & lhs, const ::logger::configureRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace logger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::logger::configureRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::logger::configureRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::logger::configureRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::logger::configureRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::logger::configureRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::logger::configureRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::logger::configureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c8808c6b0ab528f4f7c23920ff3e4bd";
  }

  static const char* value(const ::logger::configureRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c8808c6b0ab528fULL;
  static const uint64_t static_value2 = 0x4f7c23920ff3e4bdULL;
};

template<class ContainerAllocator>
struct DataType< ::logger::configureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "logger/configureRequest";
  }

  static const char* value(const ::logger::configureRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::logger::configureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string MODE_QUERY=query\n"
"string MODE_SET_CAPACITY=set_capacity\n"
"string MODE_SET_PATH=set_path\n"
"\n"
"string node\n"
"\n"
"string mode\n"
"\n"
"int32 capacity\n"
"\n"
"string path\n"
;
  }

  static const char* value(const ::logger::configureRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::logger::configureRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node);
      stream.next(m.mode);
      stream.next(m.capacity);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct configureRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::logger::configureRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::logger::configureRequest_<ContainerAllocator>& v)
  {
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "capacity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.capacity);
    s << indent << "path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOGGER_MESSAGE_CONFIGUREREQUEST_H
