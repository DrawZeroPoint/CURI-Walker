// Generated by gencpp from file servo_ctrl/SendFtAtCmdRequest.msg
// DO NOT EDIT!


#ifndef SERVO_CTRL_MESSAGE_SENDFTATCMDREQUEST_H
#define SERVO_CTRL_MESSAGE_SENDFTATCMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_ctrl
{
template <class ContainerAllocator>
struct SendFtAtCmdRequest_
{
  typedef SendFtAtCmdRequest_<ContainerAllocator> Type;

  SendFtAtCmdRequest_()
    : ft_id()
    , at_cmd()  {
    }
  SendFtAtCmdRequest_(const ContainerAllocator& _alloc)
    : ft_id(_alloc)
    , at_cmd(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ft_id_type;
  _ft_id_type ft_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _at_cmd_type;
  _at_cmd_type at_cmd;





  typedef boost::shared_ptr< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SendFtAtCmdRequest_

typedef ::servo_ctrl::SendFtAtCmdRequest_<std::allocator<void> > SendFtAtCmdRequest;

typedef boost::shared_ptr< ::servo_ctrl::SendFtAtCmdRequest > SendFtAtCmdRequestPtr;
typedef boost::shared_ptr< ::servo_ctrl::SendFtAtCmdRequest const> SendFtAtCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator1> & lhs, const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ft_id == rhs.ft_id &&
    lhs.at_cmd == rhs.at_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator1> & lhs, const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servo_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c22bd48bc684c0ae4c948d5e20ba1a79";
  }

  static const char* value(const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc22bd48bc684c0aeULL;
  static const uint64_t static_value2 = 0x4c948d5e20ba1a79ULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_ctrl/SendFtAtCmdRequest";
  }

  static const char* value(const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string ft_id\n"
"string at_cmd\n"
;
  }

  static const char* value(const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ft_id);
      stream.next(m.at_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendFtAtCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_ctrl::SendFtAtCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "ft_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ft_id);
    s << indent << "at_cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.at_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_CTRL_MESSAGE_SENDFTATCMDREQUEST_H
