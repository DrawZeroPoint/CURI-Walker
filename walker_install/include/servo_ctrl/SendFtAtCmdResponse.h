// Generated by gencpp from file servo_ctrl/SendFtAtCmdResponse.msg
// DO NOT EDIT!


#ifndef SERVO_CTRL_MESSAGE_SENDFTATCMDRESPONSE_H
#define SERVO_CTRL_MESSAGE_SENDFTATCMDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_ctrl
{
template <class ContainerAllocator>
struct SendFtAtCmdResponse_
{
  typedef SendFtAtCmdResponse_<ContainerAllocator> Type;

  SendFtAtCmdResponse_()
    : success(false)
    , at_res()
    , message()  {
    }
  SendFtAtCmdResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , at_res(_alloc)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _at_res_type;
  _at_res_type at_res;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SendFtAtCmdResponse_

typedef ::servo_ctrl::SendFtAtCmdResponse_<std::allocator<void> > SendFtAtCmdResponse;

typedef boost::shared_ptr< ::servo_ctrl::SendFtAtCmdResponse > SendFtAtCmdResponsePtr;
typedef boost::shared_ptr< ::servo_ctrl::SendFtAtCmdResponse const> SendFtAtCmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator1> & lhs, const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.at_res == rhs.at_res &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator1> & lhs, const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servo_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51b5fa2ba7cc6095b3fa4436ab5e5a44";
  }

  static const char* value(const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51b5fa2ba7cc6095ULL;
  static const uint64_t static_value2 = 0xb3fa4436ab5e5a44ULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_ctrl/SendFtAtCmdResponse";
  }

  static const char* value(const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string at_res\n"
"string message\n"
"\n"
;
  }

  static const char* value(const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.at_res);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendFtAtCmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_ctrl::SendFtAtCmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "at_res: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.at_res);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_CTRL_MESSAGE_SENDFTATCMDRESPONSE_H
