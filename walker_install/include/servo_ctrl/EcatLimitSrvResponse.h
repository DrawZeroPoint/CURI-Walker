// Generated by gencpp from file servo_ctrl/EcatLimitSrvResponse.msg
// DO NOT EDIT!


#ifndef SERVO_CTRL_MESSAGE_ECATLIMITSRVRESPONSE_H
#define SERVO_CTRL_MESSAGE_ECATLIMITSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_ctrl
{
template <class ContainerAllocator>
struct EcatLimitSrvResponse_
{
  typedef EcatLimitSrvResponse_<ContainerAllocator> Type;

  EcatLimitSrvResponse_()
    : enable(false)
    , min(0.0)
    , max(0.0)  {
    }
  EcatLimitSrvResponse_(const ContainerAllocator& _alloc)
    : enable(false)
    , min(0.0)
    , max(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef float _min_type;
  _min_type min;

   typedef float _max_type;
  _max_type max;





  typedef boost::shared_ptr< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EcatLimitSrvResponse_

typedef ::servo_ctrl::EcatLimitSrvResponse_<std::allocator<void> > EcatLimitSrvResponse;

typedef boost::shared_ptr< ::servo_ctrl::EcatLimitSrvResponse > EcatLimitSrvResponsePtr;
typedef boost::shared_ptr< ::servo_ctrl::EcatLimitSrvResponse const> EcatLimitSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator1> & lhs, const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable &&
    lhs.min == rhs.min &&
    lhs.max == rhs.max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator1> & lhs, const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servo_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b13c6d0eda9fb6752efa4b22334c34d";
  }

  static const char* value(const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b13c6d0eda9fb67ULL;
  static const uint64_t static_value2 = 0x52efa4b22334c34dULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_ctrl/EcatLimitSrvResponse";
  }

  static const char* value(const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable\n"
"float32 min\n"
"float32 max\n"
"\n"
;
  }

  static const char* value(const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.min);
      stream.next(m.max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EcatLimitSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_ctrl::EcatLimitSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "min: ";
    Printer<float>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<float>::stream(s, indent + "  ", v.max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_CTRL_MESSAGE_ECATLIMITSRVRESPONSE_H
