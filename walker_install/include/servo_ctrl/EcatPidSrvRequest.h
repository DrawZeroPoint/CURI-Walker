// Generated by gencpp from file servo_ctrl/EcatPidSrvRequest.msg
// DO NOT EDIT!


#ifndef SERVO_CTRL_MESSAGE_ECATPIDSRVREQUEST_H
#define SERVO_CTRL_MESSAGE_ECATPIDSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_ctrl
{
template <class ContainerAllocator>
struct EcatPidSrvRequest_
{
  typedef EcatPidSrvRequest_<ContainerAllocator> Type;

  EcatPidSrvRequest_()
    : cmd()
    , servo()
    , mode()
    , kp(0)
    , ki(0)
    , kd(0)  {
    }
  EcatPidSrvRequest_(const ContainerAllocator& _alloc)
    : cmd(_alloc)
    , servo(_alloc)
    , mode(_alloc)
    , kp(0)
    , ki(0)
    , kd(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  _cmd_type cmd;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _servo_type;
  _servo_type servo;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef int16_t _kp_type;
  _kp_type kp;

   typedef int16_t _ki_type;
  _ki_type ki;

   typedef int16_t _kd_type;
  _kd_type kd;





  typedef boost::shared_ptr< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EcatPidSrvRequest_

typedef ::servo_ctrl::EcatPidSrvRequest_<std::allocator<void> > EcatPidSrvRequest;

typedef boost::shared_ptr< ::servo_ctrl::EcatPidSrvRequest > EcatPidSrvRequestPtr;
typedef boost::shared_ptr< ::servo_ctrl::EcatPidSrvRequest const> EcatPidSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator1> & lhs, const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.servo == rhs.servo &&
    lhs.mode == rhs.mode &&
    lhs.kp == rhs.kp &&
    lhs.ki == rhs.ki &&
    lhs.kd == rhs.kd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator1> & lhs, const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servo_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e61fa0c292a3b55fc27bafe9f449674f";
  }

  static const char* value(const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe61fa0c292a3b55fULL;
  static const uint64_t static_value2 = 0xc27bafe9f449674fULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_ctrl/EcatPidSrvRequest";
  }

  static const char* value(const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string cmd\n"
"\n"
"\n"
"string servo\n"
"\n"
"\n"
"string mode\n"
"\n"
"\n"
"int16 kp\n"
"int16 ki\n"
"int16 kd\n"
;
  }

  static const char* value(const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.servo);
      stream.next(m.mode);
      stream.next(m.kp);
      stream.next(m.ki);
      stream.next(m.kd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EcatPidSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_ctrl::EcatPidSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
    s << indent << "servo: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.servo);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "kp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.kp);
    s << indent << "ki: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ki);
    s << indent << "kd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.kd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_CTRL_MESSAGE_ECATPIDSRVREQUEST_H
