// Generated by gencpp from file servo_ctrl/EcatSetZeroRequest.msg
// DO NOT EDIT!


#ifndef SERVO_CTRL_MESSAGE_ECATSETZEROREQUEST_H
#define SERVO_CTRL_MESSAGE_ECATSETZEROREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_ctrl
{
template <class ContainerAllocator>
struct EcatSetZeroRequest_
{
  typedef EcatSetZeroRequest_<ContainerAllocator> Type;

  EcatSetZeroRequest_()
    : servo()  {
    }
  EcatSetZeroRequest_(const ContainerAllocator& _alloc)
    : servo(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _servo_type;
  _servo_type servo;





  typedef boost::shared_ptr< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EcatSetZeroRequest_

typedef ::servo_ctrl::EcatSetZeroRequest_<std::allocator<void> > EcatSetZeroRequest;

typedef boost::shared_ptr< ::servo_ctrl::EcatSetZeroRequest > EcatSetZeroRequestPtr;
typedef boost::shared_ptr< ::servo_ctrl::EcatSetZeroRequest const> EcatSetZeroRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator1> & lhs, const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator2> & rhs)
{
  return lhs.servo == rhs.servo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator1> & lhs, const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servo_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db917f55775a8bcd06c01a6f4f18b912";
  }

  static const char* value(const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb917f55775a8bcdULL;
  static const uint64_t static_value2 = 0x06c01a6f4f18b912ULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_ctrl/EcatSetZeroRequest";
  }

  static const char* value(const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string servo\n"
;
  }

  static const char* value(const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EcatSetZeroRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_ctrl::EcatSetZeroRequest_<ContainerAllocator>& v)
  {
    s << indent << "servo: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.servo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_CTRL_MESSAGE_ECATSETZEROREQUEST_H
