// Generated by gencpp from file ces_task/TaskLegStatus.msg
// DO NOT EDIT!


#ifndef CES_TASK_MESSAGE_TASKLEGSTATUS_H
#define CES_TASK_MESSAGE_TASKLEGSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ces_task
{
template <class ContainerAllocator>
struct TaskLegStatus_
{
  typedef TaskLegStatus_<ContainerAllocator> Type;

  TaskLegStatus_()
    : header()
    , task_id()
    , demander()
    , executor()
    , task_status()
    , legs_status()
    , process_info()  {
    }
  TaskLegStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , task_id(_alloc)
    , demander(_alloc)
    , executor(_alloc)
    , task_status(_alloc)
    , legs_status(_alloc)
    , process_info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_id_type;
  _task_id_type task_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _demander_type;
  _demander_type demander;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _executor_type;
  _executor_type executor;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_status_type;
  _task_status_type task_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _legs_status_type;
  _legs_status_type legs_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _process_info_type;
  _process_info_type process_info;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OWNER_NONE)
  #undef OWNER_NONE
#endif
#if defined(_WIN32) && defined(OWNER_SDK)
  #undef OWNER_SDK
#endif
#if defined(_WIN32) && defined(OWNER_LEGS)
  #undef OWNER_LEGS
#endif
#if defined(_WIN32) && defined(OWNER_ARMS)
  #undef OWNER_ARMS
#endif
#if defined(_WIN32) && defined(OWNER_REMOTER)
  #undef OWNER_REMOTER
#endif
#if defined(_WIN32) && defined(OWNER_HOST)
  #undef OWNER_HOST
#endif
#if defined(_WIN32) && defined(TASK_NAV2CENTER)
  #undef TASK_NAV2CENTER
#endif
#if defined(_WIN32) && defined(TASK_NAV2GATE)
  #undef TASK_NAV2GATE
#endif
#if defined(_WIN32) && defined(TASK_NAV2GETBAG)
  #undef TASK_NAV2GETBAG
#endif
#if defined(_WIN32) && defined(TASK_NAV2HangBAG)
  #undef TASK_NAV2HangBAG
#endif
#if defined(_WIN32) && defined(TASK_NAV2DANCE)
  #undef TASK_NAV2DANCE
#endif
#if defined(_WIN32) && defined(TASK_NAV2WATER)
  #undef TASK_NAV2WATER
#endif
#if defined(_WIN32) && defined(TASK_NAV2FOOD)
  #undef TASK_NAV2FOOD
#endif
#if defined(_WIN32) && defined(TASK_NAV2SOFA)
  #undef TASK_NAV2SOFA
#endif
#if defined(_WIN32) && defined(TASK_NAV2NoticeDate)
  #undef TASK_NAV2NoticeDate
#endif
#if defined(_WIN32) && defined(TASK_NAV2UMBRELLA)
  #undef TASK_NAV2UMBRELLA
#endif
#if defined(_WIN32) && defined(TASK_NAV2GIVEUMBRELLA)
  #undef TASK_NAV2GIVEUMBRELLA
#endif
#if defined(_WIN32) && defined(TASK_NAV2CHARGE)
  #undef TASK_NAV2CHARGE
#endif
#if defined(_WIN32) && defined(TASK_NAV2ENDPOINT)
  #undef TASK_NAV2ENDPOINT
#endif
#if defined(_WIN32) && defined(TASK_NAV2DRAW)
  #undef TASK_NAV2DRAW
#endif
#if defined(_WIN32) && defined(TASK_FASTWALK)
  #undef TASK_FASTWALK
#endif
#if defined(_WIN32) && defined(TASK_MARKTIME)
  #undef TASK_MARKTIME
#endif
#if defined(_WIN32) && defined(TASK_STANDBY)
  #undef TASK_STANDBY
#endif
#if defined(_WIN32) && defined(TASK_DANCE)
  #undef TASK_DANCE
#endif
#if defined(_WIN32) && defined(TASK_STATUS_IDLE)
  #undef TASK_STATUS_IDLE
#endif
#if defined(_WIN32) && defined(TASK_STATUS_BUSY)
  #undef TASK_STATUS_BUSY
#endif
#if defined(_WIN32) && defined(TASK_STATUS_STOP)
  #undef TASK_STATUS_STOP
#endif
#if defined(_WIN32) && defined(TASK_STATUS_ABORT)
  #undef TASK_STATUS_ABORT
#endif
#if defined(_WIN32) && defined(TASK_STATUS_FAILED)
  #undef TASK_STATUS_FAILED
#endif
#if defined(_WIN32) && defined(LEG_STATUS_INIT)
  #undef LEG_STATUS_INIT
#endif
#if defined(_WIN32) && defined(LEG_STATUS_STANDING)
  #undef LEG_STATUS_STANDING
#endif
#if defined(_WIN32) && defined(LEG_STATUS_SCRIPTING)
  #undef LEG_STATUS_SCRIPTING
#endif
#if defined(_WIN32) && defined(LEG_STATUS_NAV)
  #undef LEG_STATUS_NAV
#endif
#if defined(_WIN32) && defined(LEG_STATUS_ARMCTRL)
  #undef LEG_STATUS_ARMCTRL
#endif
#if defined(_WIN32) && defined(LEG_STATUS_VISIONCTRL)
  #undef LEG_STATUS_VISIONCTRL
#endif
#if defined(_WIN32) && defined(LEG_STATUS_KEYBOARDCTRL)
  #undef LEG_STATUS_KEYBOARDCTRL
#endif
#if defined(_WIN32) && defined(LEG_STATUS_REMOTERCTRL)
  #undef LEG_STATUS_REMOTERCTRL
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OWNER_NONE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OWNER_SDK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OWNER_LEGS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OWNER_ARMS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OWNER_REMOTER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OWNER_HOST;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2CENTER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2GATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2GETBAG;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2HangBAG;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2DANCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2WATER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2FOOD;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2SOFA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2NoticeDate;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2UMBRELLA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2GIVEUMBRELLA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2CHARGE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2ENDPOINT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_NAV2DRAW;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_FASTWALK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_MARKTIME;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_STANDBY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_DANCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_STATUS_IDLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_STATUS_BUSY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_STATUS_STOP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_STATUS_ABORT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TASK_STATUS_FAILED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEG_STATUS_INIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEG_STATUS_STANDING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEG_STATUS_SCRIPTING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEG_STATUS_NAV;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEG_STATUS_ARMCTRL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEG_STATUS_VISIONCTRL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEG_STATUS_KEYBOARDCTRL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEG_STATUS_REMOTERCTRL;

  typedef boost::shared_ptr< ::ces_task::TaskLegStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ces_task::TaskLegStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TaskLegStatus_

typedef ::ces_task::TaskLegStatus_<std::allocator<void> > TaskLegStatus;

typedef boost::shared_ptr< ::ces_task::TaskLegStatus > TaskLegStatusPtr;
typedef boost::shared_ptr< ::ces_task::TaskLegStatus const> TaskLegStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::OWNER_NONE =
        
          "none"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::OWNER_SDK =
        
          "sdk"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::OWNER_LEGS =
        
          "legs"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::OWNER_ARMS =
        
          "arms"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::OWNER_REMOTER =
        
          "remoter"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::OWNER_HOST =
        
          "host"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2CENTER =
        
          "nav2Center"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2GATE =
        
          "nav2Gate"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2GETBAG =
        
          "nav2GetBag"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2HangBAG =
        
          "nav2HangBag"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2DANCE =
        
          "nav2Dance"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2WATER =
        
          "nav2GetWater"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2FOOD =
        
          "nav2Food"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2SOFA =
        
          "nav2Sofa"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2NoticeDate =
        
          "nav2NoticeDate"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2UMBRELLA =
        
          "nav2Umbrella"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2GIVEUMBRELLA =
        
          "nav2GiveUmbrella"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2CHARGE =
        
          "nav2Charge"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2ENDPOINT =
        
          "nav2Endpoint"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_NAV2DRAW =
        
          "nav2Draw"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_FASTWALK =
        
          "doFastwalk"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_MARKTIME =
        
          "markTime"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_STANDBY =
        
          "standby"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_DANCE =
        
          "dance"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_STATUS_IDLE =
        
          "idle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_STATUS_BUSY =
        
          "busy"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_STATUS_STOP =
        
          "stopped"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_STATUS_ABORT =
        
          "abort"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::TASK_STATUS_FAILED =
        
          "fail"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::LEG_STATUS_INIT =
        
          "standInit"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::LEG_STATUS_STANDING =
        
          "standing"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::LEG_STATUS_SCRIPTING =
        
          "scripting"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::LEG_STATUS_NAV =
        
          "navigating"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::LEG_STATUS_ARMCTRL =
        
          "armCtrl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::LEG_STATUS_VISIONCTRL =
        
          "visionCtrl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::LEG_STATUS_KEYBOARDCTRL =
        
          "keyboardCtrl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      TaskLegStatus_<ContainerAllocator>::LEG_STATUS_REMOTERCTRL =
        
          "remoterCtrl"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ces_task::TaskLegStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ces_task::TaskLegStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ces_task::TaskLegStatus_<ContainerAllocator1> & lhs, const ::ces_task::TaskLegStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.task_id == rhs.task_id &&
    lhs.demander == rhs.demander &&
    lhs.executor == rhs.executor &&
    lhs.task_status == rhs.task_status &&
    lhs.legs_status == rhs.legs_status &&
    lhs.process_info == rhs.process_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ces_task::TaskLegStatus_<ContainerAllocator1> & lhs, const ::ces_task::TaskLegStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ces_task

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ces_task::TaskLegStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ces_task::TaskLegStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ces_task::TaskLegStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ces_task::TaskLegStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ces_task::TaskLegStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ces_task::TaskLegStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ces_task::TaskLegStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bad847b3c04a60d5d22c49c56407a7be";
  }

  static const char* value(const ::ces_task::TaskLegStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbad847b3c04a60d5ULL;
  static const uint64_t static_value2 = 0xd22c49c56407a7beULL;
};

template<class ContainerAllocator>
struct DataType< ::ces_task::TaskLegStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ces_task/TaskLegStatus";
  }

  static const char* value(const ::ces_task::TaskLegStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ces_task::TaskLegStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# owner ids\n"
"string OWNER_NONE=none\n"
"string OWNER_SDK=sdk\n"
"string OWNER_LEGS=legs\n"
"string OWNER_ARMS=arms\n"
"string OWNER_REMOTER=remoter\n"
"string OWNER_HOST=host\n"
"\n"
"# task ids\n"
"## tasks for legs\n"
"string TASK_NAV2CENTER=nav2Center\n"
"string TASK_NAV2GATE=nav2Gate\n"
"string TASK_NAV2GETBAG=nav2GetBag\n"
"string TASK_NAV2HangBAG=nav2HangBag\n"
"string TASK_NAV2DANCE=nav2Dance\n"
"string TASK_NAV2WATER=nav2GetWater\n"
"string TASK_NAV2FOOD=nav2Food\n"
"string TASK_NAV2SOFA=nav2Sofa\n"
"string TASK_NAV2NoticeDate=nav2NoticeDate\n"
"string TASK_NAV2UMBRELLA=nav2Umbrella\n"
"string TASK_NAV2GIVEUMBRELLA=nav2GiveUmbrella\n"
"string TASK_NAV2CHARGE=nav2Charge\n"
"string TASK_NAV2ENDPOINT=nav2Endpoint\n"
"string TASK_NAV2DRAW=nav2Draw\n"
"string TASK_FASTWALK=doFastwalk\n"
"string TASK_MARKTIME=markTime\n"
"string TASK_STANDBY=standby\n"
"string TASK_DANCE=dance\n"
"\n"
"# task status defines\n"
"string TASK_STATUS_IDLE=idle\n"
"string TASK_STATUS_BUSY=busy\n"
"string TASK_STATUS_STOP=stopped\n"
"string TASK_STATUS_ABORT=abort\n"
"string TASK_STATUS_FAILED=fail\n"
"\n"
"# legs status defines\n"
"string LEG_STATUS_INIT=standInit\n"
"string LEG_STATUS_STANDING=standing\n"
"string LEG_STATUS_SCRIPTING=scripting\n"
"string LEG_STATUS_NAV=navigating\n"
"string LEG_STATUS_ARMCTRL=armCtrl\n"
"string LEG_STATUS_VISIONCTRL=visionCtrl\n"
"string LEG_STATUS_KEYBOARDCTRL=keyboardCtrl\n"
"string LEG_STATUS_REMOTERCTRL=remoterCtrl\n"
"\n"
"##############################################\n"
"\n"
"# time stamp must be filled\n"
"Header header\n"
"\n"
"# current task id\n"
"string task_id\n"
"\n"
"# who send request\n"
"string demander\n"
"\n"
"# who execute task\n"
"string executor\n"
"\n"
"# current task status\n"
"string task_status\n"
"\n"
"# current leg status\n"
"string legs_status\n"
"\n"
"# progress info(optional)\n"
"string process_info\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ces_task::TaskLegStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ces_task::TaskLegStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.task_id);
      stream.next(m.demander);
      stream.next(m.executor);
      stream.next(m.task_status);
      stream.next(m.legs_status);
      stream.next(m.process_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskLegStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ces_task::TaskLegStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ces_task::TaskLegStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "task_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task_id);
    s << indent << "demander: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.demander);
    s << indent << "executor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.executor);
    s << indent << "task_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task_status);
    s << indent << "legs_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.legs_status);
    s << indent << "process_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.process_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CES_TASK_MESSAGE_TASKLEGSTATUS_H
