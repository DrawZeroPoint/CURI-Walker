// Generated by gencpp from file cruiser_msgs/humitureResponse.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_HUMITURERESPONSE_H
#define CRUISER_MSGS_MESSAGE_HUMITURERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct humitureResponse_
{
  typedef humitureResponse_<ContainerAllocator> Type;

  humitureResponse_()
    : temperature(0.0)
    , humidity(0.0)
    , message()  {
    }
  humitureResponse_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , humidity(0.0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef double _temperature_type;
  _temperature_type temperature;

   typedef double _humidity_type;
  _humidity_type humidity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::cruiser_msgs::humitureResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::humitureResponse_<ContainerAllocator> const> ConstPtr;

}; // struct humitureResponse_

typedef ::cruiser_msgs::humitureResponse_<std::allocator<void> > humitureResponse;

typedef boost::shared_ptr< ::cruiser_msgs::humitureResponse > humitureResponsePtr;
typedef boost::shared_ptr< ::cruiser_msgs::humitureResponse const> humitureResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::humitureResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::humitureResponse_<ContainerAllocator1> & lhs, const ::cruiser_msgs::humitureResponse_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.humidity == rhs.humidity &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::humitureResponse_<ContainerAllocator1> & lhs, const ::cruiser_msgs::humitureResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::humitureResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::humitureResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::humitureResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ad8470d604c1ba25cf0ad6b03378ac9";
  }

  static const char* value(const ::cruiser_msgs::humitureResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ad8470d604c1ba2ULL;
  static const uint64_t static_value2 = 0x5cf0ad6b03378ac9ULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/humitureResponse";
  }

  static const char* value(const ::cruiser_msgs::humitureResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 temperature\n"
"float64 humidity\n"
"string message\n"
"\n"
;
  }

  static const char* value(const ::cruiser_msgs::humitureResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.humidity);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct humitureResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::humitureResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::humitureResponse_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "humidity: ";
    Printer<double>::stream(s, indent + "  ", v.humidity);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_HUMITURERESPONSE_H
