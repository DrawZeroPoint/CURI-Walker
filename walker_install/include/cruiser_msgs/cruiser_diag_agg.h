// Generated by gencpp from file cruiser_msgs/cruiser_diag_agg.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_CRUISER_DIAG_AGG_H
#define CRUISER_MSGS_MESSAGE_CRUISER_DIAG_AGG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct cruiser_diag_agg_
{
  typedef cruiser_diag_agg_<ContainerAllocator> Type;

  cruiser_diag_agg_()
    : status(0)
    , msg()
    , key(0)
    , value(0)
    , data(0)  {
    }
  cruiser_diag_agg_(const ContainerAllocator& _alloc)
    : status(0)
    , msg(_alloc)
    , key(0)
    , value(0)
    , data(0)  {
  (void)_alloc;
    }



   typedef int8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  _msg_type msg;

   typedef int32_t _key_type;
  _key_type key;

   typedef int32_t _value_type;
  _value_type value;

   typedef int32_t _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> const> ConstPtr;

}; // struct cruiser_diag_agg_

typedef ::cruiser_msgs::cruiser_diag_agg_<std::allocator<void> > cruiser_diag_agg;

typedef boost::shared_ptr< ::cruiser_msgs::cruiser_diag_agg > cruiser_diag_aggPtr;
typedef boost::shared_ptr< ::cruiser_msgs::cruiser_diag_agg const> cruiser_diag_aggConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.msg == rhs.msg &&
    lhs.key == rhs.key &&
    lhs.value == rhs.value &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68999ce2b5e8dd878bf64d6dbfe7c7dc";
  }

  static const char* value(const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68999ce2b5e8dd87ULL;
  static const uint64_t static_value2 = 0x8bf64d6dbfe7c7dcULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/cruiser_diag_agg";
  }

  static const char* value(const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#topic /cruiser/diag_agg\n"
"byte status\n"
"string msg\n"
"int32 key\n"
"int32 value\n"
"int32 data\n"
;
  }

  static const char* value(const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.msg);
      stream.next(m.key);
      stream.next(m.value);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cruiser_diag_agg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::cruiser_diag_agg_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
    s << indent << "key: ";
    Printer<int32_t>::stream(s, indent + "  ", v.key);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
    s << indent << "data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_CRUISER_DIAG_AGG_H
