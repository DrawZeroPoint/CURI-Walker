// Generated by gencpp from file cruiser_msgs/cruiserSensorBoardStatus.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_CRUISERSENSORBOARDSTATUS_H
#define CRUISER_MSGS_MESSAGE_CRUISERSENSORBOARDSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct cruiserSensorBoardStatus_
{
  typedef cruiserSensorBoardStatus_<ContainerAllocator> Type;

  cruiserSensorBoardStatus_()
    : sensor_board_abnormal(0)  {
    }
  cruiserSensorBoardStatus_(const ContainerAllocator& _alloc)
    : sensor_board_abnormal(0)  {
  (void)_alloc;
    }



   typedef uint32_t _sensor_board_abnormal_type;
  _sensor_board_abnormal_type sensor_board_abnormal;





  typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> const> ConstPtr;

}; // struct cruiserSensorBoardStatus_

typedef ::cruiser_msgs::cruiserSensorBoardStatus_<std::allocator<void> > cruiserSensorBoardStatus;

typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorBoardStatus > cruiserSensorBoardStatusPtr;
typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorBoardStatus const> cruiserSensorBoardStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_board_abnormal == rhs.sensor_board_abnormal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c0773c157c86740d50fb4f7ef626929";
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c0773c157c86740ULL;
  static const uint64_t static_value2 = 0xd50fb4f7ef626929ULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/cruiserSensorBoardStatus";
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 sensor_board_abnormal\n"
"\n"
"\n"
;
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_board_abnormal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cruiserSensorBoardStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::cruiserSensorBoardStatus_<ContainerAllocator>& v)
  {
    s << indent << "sensor_board_abnormal: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sensor_board_abnormal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_CRUISERSENSORBOARDSTATUS_H
