// Generated by gencpp from file cruiser_msgs/cruiserSensorUpdate.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_CRUISERSENSORUPDATE_H
#define CRUISER_MSGS_MESSAGE_CRUISERSENSORUPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct cruiserSensorUpdate_
{
  typedef cruiserSensorUpdate_<ContainerAllocator> Type;

  cruiserSensorUpdate_()
    : data1(0)
    , data2(0)
    , data3(0)
    , data4(0)
    , data5(0)
    , data6(0)  {
    }
  cruiserSensorUpdate_(const ContainerAllocator& _alloc)
    : data1(0)
    , data2(0)
    , data3(0)
    , data4(0)
    , data5(0)
    , data6(0)  {
  (void)_alloc;
    }



   typedef uint32_t _data1_type;
  _data1_type data1;

   typedef uint32_t _data2_type;
  _data2_type data2;

   typedef uint32_t _data3_type;
  _data3_type data3;

   typedef uint32_t _data4_type;
  _data4_type data4;

   typedef uint32_t _data5_type;
  _data5_type data5;

   typedef uint32_t _data6_type;
  _data6_type data6;





  typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct cruiserSensorUpdate_

typedef ::cruiser_msgs::cruiserSensorUpdate_<std::allocator<void> > cruiserSensorUpdate;

typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorUpdate > cruiserSensorUpdatePtr;
typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorUpdate const> cruiserSensorUpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator2> & rhs)
{
  return lhs.data1 == rhs.data1 &&
    lhs.data2 == rhs.data2 &&
    lhs.data3 == rhs.data3 &&
    lhs.data4 == rhs.data4 &&
    lhs.data5 == rhs.data5 &&
    lhs.data6 == rhs.data6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca7cc81c4478bf5d727f35a1887362ee";
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca7cc81c4478bf5dULL;
  static const uint64_t static_value2 = 0x727f35a1887362eeULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/cruiserSensorUpdate";
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 data1\n"
"uint32 data2\n"
"uint32 data3\n"
"uint32 data4\n"
"uint32 data5\n"
"uint32 data6\n"
"\n"
;
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data1);
      stream.next(m.data2);
      stream.next(m.data3);
      stream.next(m.data4);
      stream.next(m.data5);
      stream.next(m.data6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cruiserSensorUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::cruiserSensorUpdate_<ContainerAllocator>& v)
  {
    s << indent << "data1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data1);
    s << indent << "data2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data2);
    s << indent << "data3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data3);
    s << indent << "data4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data4);
    s << indent << "data5: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data5);
    s << indent << "data6: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_CRUISERSENSORUPDATE_H
