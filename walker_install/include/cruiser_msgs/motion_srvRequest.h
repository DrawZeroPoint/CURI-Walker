// Generated by gencpp from file cruiser_msgs/motion_srvRequest.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_MOTION_SRVREQUEST_H
#define CRUISER_MSGS_MESSAGE_MOTION_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct motion_srvRequest_
{
  typedef motion_srvRequest_<ContainerAllocator> Type;

  motion_srvRequest_()
    : command(0)
    , data()
    , actionName()
    , writetime()
    , targetJointPosition()  {
      data.assign(0);

      writetime.assign(0);

      targetJointPosition.assign(0.0);
  }
  motion_srvRequest_(const ContainerAllocator& _alloc)
    : command(0)
    , data()
    , actionName(_alloc)
    , writetime()
    , targetJointPosition()  {
  (void)_alloc;
      data.assign(0);

      writetime.assign(0);

      targetJointPosition.assign(0.0);
  }



   typedef int32_t _command_type;
  _command_type command;

   typedef boost::array<int32_t, 3>  _data_type;
  _data_type data;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _actionName_type;
  _actionName_type actionName;

   typedef boost::array<int32_t, 1024>  _writetime_type;
  _writetime_type writetime;

   typedef boost::array<double, 16>  _targetJointPosition_type;
  _targetJointPosition_type targetJointPosition;





  typedef boost::shared_ptr< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct motion_srvRequest_

typedef ::cruiser_msgs::motion_srvRequest_<std::allocator<void> > motion_srvRequest;

typedef boost::shared_ptr< ::cruiser_msgs::motion_srvRequest > motion_srvRequestPtr;
typedef boost::shared_ptr< ::cruiser_msgs::motion_srvRequest const> motion_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator1> & lhs, const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.data == rhs.data &&
    lhs.actionName == rhs.actionName &&
    lhs.writetime == rhs.writetime &&
    lhs.targetJointPosition == rhs.targetJointPosition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator1> & lhs, const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5664711c84c4775f891ad12ba2520f64";
  }

  static const char* value(const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5664711c84c4775fULL;
  static const uint64_t static_value2 = 0x891ad12ba2520f64ULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/motion_srvRequest";
  }

  static const char* value(const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"int32 command\n"
"\n"
"\n"
"int32[3] data\n"
"\n"
"string actionName\n"
"\n"
"int32[1024] writetime\n"
"\n"
"float64[16] targetJointPosition\n"
"\n"
;
  }

  static const char* value(const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.data);
      stream.next(m.actionName);
      stream.next(m.writetime);
      stream.next(m.targetJointPosition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::motion_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::motion_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "actionName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.actionName);
    s << indent << "writetime[]" << std::endl;
    for (size_t i = 0; i < v.writetime.size(); ++i)
    {
      s << indent << "  writetime[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.writetime[i]);
    }
    s << indent << "targetJointPosition[]" << std::endl;
    for (size_t i = 0; i < v.targetJointPosition.size(); ++i)
    {
      s << indent << "  targetJointPosition[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.targetJointPosition[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_MOTION_SRVREQUEST_H
