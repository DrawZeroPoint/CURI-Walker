// Generated by gencpp from file cruiser_msgs/cruiser_stringRequest.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_CRUISER_STRINGREQUEST_H
#define CRUISER_MSGS_MESSAGE_CRUISER_STRINGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct cruiser_stringRequest_
{
  typedef cruiser_stringRequest_<ContainerAllocator> Type;

  cruiser_stringRequest_()
    : priority(0)
    , str()  {
    }
  cruiser_stringRequest_(const ContainerAllocator& _alloc)
    : priority(0)
    , str(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _priority_type;
  _priority_type priority;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _str_type;
  _str_type str;





  typedef boost::shared_ptr< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cruiser_stringRequest_

typedef ::cruiser_msgs::cruiser_stringRequest_<std::allocator<void> > cruiser_stringRequest;

typedef boost::shared_ptr< ::cruiser_msgs::cruiser_stringRequest > cruiser_stringRequestPtr;
typedef boost::shared_ptr< ::cruiser_msgs::cruiser_stringRequest const> cruiser_stringRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator2> & rhs)
{
  return lhs.priority == rhs.priority &&
    lhs.str == rhs.str;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77382d83cbf07d498fedd9ee475648c2";
  }

  static const char* value(const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77382d83cbf07d49ULL;
  static const uint64_t static_value2 = 0x8fedd9ee475648c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/cruiser_stringRequest";
  }

  static const char* value(const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 priority\n"
"string str\n"
;
  }

  static const char* value(const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.priority);
      stream.next(m.str);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cruiser_stringRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::cruiser_stringRequest_<ContainerAllocator>& v)
  {
    s << indent << "priority: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.priority);
    s << indent << "str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.str);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_CRUISER_STRINGREQUEST_H
