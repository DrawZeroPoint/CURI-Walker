// Generated by gencpp from file cruiser_msgs/joint_abnor.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_JOINT_ABNOR_H
#define CRUISER_MSGS_MESSAGE_JOINT_ABNOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct joint_abnor_
{
  typedef joint_abnor_<ContainerAllocator> Type;

  joint_abnor_()
    : jointName()
    , jointIndex(0)
    , abnorState(0)  {
    }
  joint_abnor_(const ContainerAllocator& _alloc)
    : jointName(_alloc)
    , jointIndex(0)
    , abnorState(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _jointName_type;
  _jointName_type jointName;

   typedef int32_t _jointIndex_type;
  _jointIndex_type jointIndex;

   typedef int32_t _abnorState_type;
  _abnorState_type abnorState;





  typedef boost::shared_ptr< ::cruiser_msgs::joint_abnor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::joint_abnor_<ContainerAllocator> const> ConstPtr;

}; // struct joint_abnor_

typedef ::cruiser_msgs::joint_abnor_<std::allocator<void> > joint_abnor;

typedef boost::shared_ptr< ::cruiser_msgs::joint_abnor > joint_abnorPtr;
typedef boost::shared_ptr< ::cruiser_msgs::joint_abnor const> joint_abnorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::joint_abnor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::joint_abnor_<ContainerAllocator1> & lhs, const ::cruiser_msgs::joint_abnor_<ContainerAllocator2> & rhs)
{
  return lhs.jointName == rhs.jointName &&
    lhs.jointIndex == rhs.jointIndex &&
    lhs.abnorState == rhs.abnorState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::joint_abnor_<ContainerAllocator1> & lhs, const ::cruiser_msgs::joint_abnor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::joint_abnor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::joint_abnor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::joint_abnor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d33fc6a742571f80a3793eed68aa9c0d";
  }

  static const char* value(const ::cruiser_msgs::joint_abnor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd33fc6a742571f80ULL;
  static const uint64_t static_value2 = 0xa3793eed68aa9c0dULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/joint_abnor";
  }

  static const char* value(const ::cruiser_msgs::joint_abnor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string jointName\n"
"\n"
"# Joints index\n"
"int32 jointIndex\n"
"\n"
"# abnorState\n"
"# 1:low Temperature protection\n"
"# 2:high Temperature protection\n"
"# 3:low voltage portection\n"
"# 4:high voltage portection\n"
"# 5:current portection\n"
"# 6:force portection\n"
"# 7:fuse portection\n"
"# 8:PWM portection\n"
"int32 abnorState\n"
;
  }

  static const char* value(const ::cruiser_msgs::joint_abnor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jointName);
      stream.next(m.jointIndex);
      stream.next(m.abnorState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_abnor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::joint_abnor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::joint_abnor_<ContainerAllocator>& v)
  {
    s << indent << "jointName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.jointName);
    s << indent << "jointIndex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.jointIndex);
    s << indent << "abnorState: ";
    Printer<int32_t>::stream(s, indent + "  ", v.abnorState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_JOINT_ABNOR_H
