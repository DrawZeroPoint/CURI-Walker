// Generated by gencpp from file cruiser_msgs/cruiserSensorWallCheckIr.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_CRUISERSENSORWALLCHECKIR_H
#define CRUISER_MSGS_MESSAGE_CRUISERSENSORWALLCHECKIR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct cruiserSensorWallCheckIr_
{
  typedef cruiserSensorWallCheckIr_<ContainerAllocator> Type;

  cruiserSensorWallCheckIr_()
    : dist1(0)
    , dist2(0)
    , dist3(0)
    , dist4(0)
    , dist5(0)
    , dist6(0)  {
    }
  cruiserSensorWallCheckIr_(const ContainerAllocator& _alloc)
    : dist1(0)
    , dist2(0)
    , dist3(0)
    , dist4(0)
    , dist5(0)
    , dist6(0)  {
  (void)_alloc;
    }



   typedef uint32_t _dist1_type;
  _dist1_type dist1;

   typedef uint32_t _dist2_type;
  _dist2_type dist2;

   typedef uint32_t _dist3_type;
  _dist3_type dist3;

   typedef uint32_t _dist4_type;
  _dist4_type dist4;

   typedef uint32_t _dist5_type;
  _dist5_type dist5;

   typedef uint32_t _dist6_type;
  _dist6_type dist6;





  typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> const> ConstPtr;

}; // struct cruiserSensorWallCheckIr_

typedef ::cruiser_msgs::cruiserSensorWallCheckIr_<std::allocator<void> > cruiserSensorWallCheckIr;

typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorWallCheckIr > cruiserSensorWallCheckIrPtr;
typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorWallCheckIr const> cruiserSensorWallCheckIrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator2> & rhs)
{
  return lhs.dist1 == rhs.dist1 &&
    lhs.dist2 == rhs.dist2 &&
    lhs.dist3 == rhs.dist3 &&
    lhs.dist4 == rhs.dist4 &&
    lhs.dist5 == rhs.dist5 &&
    lhs.dist6 == rhs.dist6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2899b05469a7aab9f6a6ab873a44b165";
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2899b05469a7aab9ULL;
  static const uint64_t static_value2 = 0xf6a6ab873a44b165ULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/cruiserSensorWallCheckIr";
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 dist1\n"
"uint32 dist2\n"
"uint32 dist3\n"
"uint32 dist4\n"
"uint32 dist5\n"
"uint32 dist6\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dist1);
      stream.next(m.dist2);
      stream.next(m.dist3);
      stream.next(m.dist4);
      stream.next(m.dist5);
      stream.next(m.dist6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cruiserSensorWallCheckIr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::cruiserSensorWallCheckIr_<ContainerAllocator>& v)
  {
    s << indent << "dist1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dist1);
    s << indent << "dist2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dist2);
    s << indent << "dist3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dist3);
    s << indent << "dist4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dist4);
    s << indent << "dist5: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dist5);
    s << indent << "dist6: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dist6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_CRUISERSENSORWALLCHECKIR_H
