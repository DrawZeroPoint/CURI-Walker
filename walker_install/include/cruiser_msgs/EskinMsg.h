// Generated by gencpp from file cruiser_msgs/EskinMsg.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_ESKINMSG_H
#define CRUISER_MSGS_MESSAGE_ESKINMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct EskinMsg_
{
  typedef EskinMsg_<ContainerAllocator> Type;

  EskinMsg_()
    : Name()
    , E_skin(0)
    , message()  {
    }
  EskinMsg_(const ContainerAllocator& _alloc)
    : Name(_alloc)
    , E_skin(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Name_type;
  _Name_type Name;

   typedef uint32_t _E_skin_type;
  _E_skin_type E_skin;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::cruiser_msgs::EskinMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::EskinMsg_<ContainerAllocator> const> ConstPtr;

}; // struct EskinMsg_

typedef ::cruiser_msgs::EskinMsg_<std::allocator<void> > EskinMsg;

typedef boost::shared_ptr< ::cruiser_msgs::EskinMsg > EskinMsgPtr;
typedef boost::shared_ptr< ::cruiser_msgs::EskinMsg const> EskinMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::EskinMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::EskinMsg_<ContainerAllocator1> & lhs, const ::cruiser_msgs::EskinMsg_<ContainerAllocator2> & rhs)
{
  return lhs.Name == rhs.Name &&
    lhs.E_skin == rhs.E_skin &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::EskinMsg_<ContainerAllocator1> & lhs, const ::cruiser_msgs::EskinMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::EskinMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::EskinMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::EskinMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77d3caef613d1fc8fbecb5c35a4b92d0";
  }

  static const char* value(const ::cruiser_msgs::EskinMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77d3caef613d1fc8ULL;
  static const uint64_t static_value2 = 0xfbecb5c35a4b92d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/EskinMsg";
  }

  static const char* value(const ::cruiser_msgs::EskinMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Name\n"
"uint32 E_skin\n"
"string message\n"
"\n"
;
  }

  static const char* value(const ::cruiser_msgs::EskinMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Name);
      stream.next(m.E_skin);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EskinMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::EskinMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::EskinMsg_<ContainerAllocator>& v)
  {
    s << indent << "Name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Name);
    s << indent << "E_skin: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.E_skin);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_ESKINMSG_H
