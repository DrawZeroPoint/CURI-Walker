// Generated by gencpp from file cruiser_msgs/cruiserSensorAltrasonic.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_CRUISERSENSORALTRASONIC_H
#define CRUISER_MSGS_MESSAGE_CRUISERSENSORALTRASONIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct cruiserSensorAltrasonic_
{
  typedef cruiserSensorAltrasonic_<ContainerAllocator> Type;

  cruiserSensorAltrasonic_()
    : distance1(0)
    , distance2(0)
    , distance3(0)
    , distance4(0)
    , distance5(0)
    , distance6(0)
    , waist_distance1(0)
    , waist_distance2(0)
    , waist_distance3(0)
    , waist_distance4(0)
    , waist_distance5(0)
    , waist_distance6(0)
    , waist_microwave(0)  {
    }
  cruiserSensorAltrasonic_(const ContainerAllocator& _alloc)
    : distance1(0)
    , distance2(0)
    , distance3(0)
    , distance4(0)
    , distance5(0)
    , distance6(0)
    , waist_distance1(0)
    , waist_distance2(0)
    , waist_distance3(0)
    , waist_distance4(0)
    , waist_distance5(0)
    , waist_distance6(0)
    , waist_microwave(0)  {
  (void)_alloc;
    }



   typedef uint32_t _distance1_type;
  _distance1_type distance1;

   typedef uint32_t _distance2_type;
  _distance2_type distance2;

   typedef uint32_t _distance3_type;
  _distance3_type distance3;

   typedef uint32_t _distance4_type;
  _distance4_type distance4;

   typedef uint32_t _distance5_type;
  _distance5_type distance5;

   typedef uint32_t _distance6_type;
  _distance6_type distance6;

   typedef uint32_t _waist_distance1_type;
  _waist_distance1_type waist_distance1;

   typedef uint32_t _waist_distance2_type;
  _waist_distance2_type waist_distance2;

   typedef uint32_t _waist_distance3_type;
  _waist_distance3_type waist_distance3;

   typedef uint32_t _waist_distance4_type;
  _waist_distance4_type waist_distance4;

   typedef uint32_t _waist_distance5_type;
  _waist_distance5_type waist_distance5;

   typedef uint32_t _waist_distance6_type;
  _waist_distance6_type waist_distance6;

   typedef uint32_t _waist_microwave_type;
  _waist_microwave_type waist_microwave;





  typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> const> ConstPtr;

}; // struct cruiserSensorAltrasonic_

typedef ::cruiser_msgs::cruiserSensorAltrasonic_<std::allocator<void> > cruiserSensorAltrasonic;

typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorAltrasonic > cruiserSensorAltrasonicPtr;
typedef boost::shared_ptr< ::cruiser_msgs::cruiserSensorAltrasonic const> cruiserSensorAltrasonicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator2> & rhs)
{
  return lhs.distance1 == rhs.distance1 &&
    lhs.distance2 == rhs.distance2 &&
    lhs.distance3 == rhs.distance3 &&
    lhs.distance4 == rhs.distance4 &&
    lhs.distance5 == rhs.distance5 &&
    lhs.distance6 == rhs.distance6 &&
    lhs.waist_distance1 == rhs.waist_distance1 &&
    lhs.waist_distance2 == rhs.waist_distance2 &&
    lhs.waist_distance3 == rhs.waist_distance3 &&
    lhs.waist_distance4 == rhs.waist_distance4 &&
    lhs.waist_distance5 == rhs.waist_distance5 &&
    lhs.waist_distance6 == rhs.waist_distance6 &&
    lhs.waist_microwave == rhs.waist_microwave;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator1> & lhs, const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52802149de24fd2581b097f77f88a09b";
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52802149de24fd25ULL;
  static const uint64_t static_value2 = 0x81b097f77f88a09bULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/cruiserSensorAltrasonic";
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 distance1\n"
"uint32 distance2\n"
"uint32 distance3\n"
"uint32 distance4\n"
"uint32 distance5\n"
"uint32 distance6\n"
"\n"
"uint32 waist_distance1\n"
"uint32 waist_distance2\n"
"uint32 waist_distance3\n"
"uint32 waist_distance4\n"
"uint32 waist_distance5\n"
"uint32 waist_distance6\n"
"\n"
"uint32 waist_microwave\n"
"\n"
"\n"
;
  }

  static const char* value(const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance1);
      stream.next(m.distance2);
      stream.next(m.distance3);
      stream.next(m.distance4);
      stream.next(m.distance5);
      stream.next(m.distance6);
      stream.next(m.waist_distance1);
      stream.next(m.waist_distance2);
      stream.next(m.waist_distance3);
      stream.next(m.waist_distance4);
      stream.next(m.waist_distance5);
      stream.next(m.waist_distance6);
      stream.next(m.waist_microwave);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cruiserSensorAltrasonic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::cruiserSensorAltrasonic_<ContainerAllocator>& v)
  {
    s << indent << "distance1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.distance1);
    s << indent << "distance2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.distance2);
    s << indent << "distance3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.distance3);
    s << indent << "distance4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.distance4);
    s << indent << "distance5: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.distance5);
    s << indent << "distance6: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.distance6);
    s << indent << "waist_distance1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.waist_distance1);
    s << indent << "waist_distance2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.waist_distance2);
    s << indent << "waist_distance3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.waist_distance3);
    s << indent << "waist_distance4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.waist_distance4);
    s << indent << "waist_distance5: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.waist_distance5);
    s << indent << "waist_distance6: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.waist_distance6);
    s << indent << "waist_microwave: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.waist_microwave);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_CRUISERSENSORALTRASONIC_H
