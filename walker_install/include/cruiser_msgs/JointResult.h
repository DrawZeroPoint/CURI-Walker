// Generated by gencpp from file cruiser_msgs/JointResult.msg
// DO NOT EDIT!


#ifndef CRUISER_MSGS_MESSAGE_JOINTRESULT_H
#define CRUISER_MSGS_MESSAGE_JOINTRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cruiser_msgs
{
template <class ContainerAllocator>
struct JointResult_
{
  typedef JointResult_<ContainerAllocator> Type;

  JointResult_()
    : id()
    , stamp()
    , errCode(0)
    , joints()
    , name()
    , jointIndex()
    , position()
    , speed()
    , duration()
    , current()  {
      joints.assign(0.0);
  }
  JointResult_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , stamp()
    , errCode(0)
    , joints()
    , name(_alloc)
    , jointIndex(_alloc)
    , position(_alloc)
    , speed(_alloc)
    , duration(_alloc)
    , current(_alloc)  {
  (void)_alloc;
      joints.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _errCode_type;
  _errCode_type errCode;

   typedef boost::array<double, 16>  _joints_type;
  _joints_type joints;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _jointIndex_type;
  _jointIndex_type jointIndex;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  _position_type position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _speed_type;
  _speed_type speed;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _duration_type;
  _duration_type duration;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::cruiser_msgs::JointResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cruiser_msgs::JointResult_<ContainerAllocator> const> ConstPtr;

}; // struct JointResult_

typedef ::cruiser_msgs::JointResult_<std::allocator<void> > JointResult;

typedef boost::shared_ptr< ::cruiser_msgs::JointResult > JointResultPtr;
typedef boost::shared_ptr< ::cruiser_msgs::JointResult const> JointResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cruiser_msgs::JointResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cruiser_msgs::JointResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cruiser_msgs::JointResult_<ContainerAllocator1> & lhs, const ::cruiser_msgs::JointResult_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.stamp == rhs.stamp &&
    lhs.errCode == rhs.errCode &&
    lhs.joints == rhs.joints &&
    lhs.name == rhs.name &&
    lhs.jointIndex == rhs.jointIndex &&
    lhs.position == rhs.position &&
    lhs.speed == rhs.speed &&
    lhs.duration == rhs.duration &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cruiser_msgs::JointResult_<ContainerAllocator1> & lhs, const ::cruiser_msgs::JointResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cruiser_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::JointResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cruiser_msgs::JointResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::JointResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cruiser_msgs::JointResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::JointResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cruiser_msgs::JointResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cruiser_msgs::JointResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60682833e270feaa2ef1ee50b6380b52";
  }

  static const char* value(const ::cruiser_msgs::JointResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60682833e270feaaULL;
  static const uint64_t static_value2 = 0x2ef1ee50b6380b52ULL;
};

template<class ContainerAllocator>
struct DataType< ::cruiser_msgs::JointResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cruiser_msgs/JointResult";
  }

  static const char* value(const ::cruiser_msgs::JointResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cruiser_msgs::JointResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"time stamp\n"
"int32 errCode\n"
"float64[16] joints\n"
"\n"
"string[] name\n"
"\n"
"# Joints index to control in array\n"
"uint32[] jointIndex\n"
"\n"
"# Corresponding joints postion\n"
"# unit - radian;\n"
"# example - [0.54, 1.22, 1.39]\n"
"float64[] position\n"
"\n"
"# Corresponding joints max speed\n"
"float64[] speed\n"
"\n"
"# Corresponding joints motion time\n"
"# unit - millisecond\n"
"int64[] duration\n"
"\n"
"float64[] current\n"
;
  }

  static const char* value(const ::cruiser_msgs::JointResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cruiser_msgs::JointResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.stamp);
      stream.next(m.errCode);
      stream.next(m.joints);
      stream.next(m.name);
      stream.next(m.jointIndex);
      stream.next(m.position);
      stream.next(m.speed);
      stream.next(m.duration);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cruiser_msgs::JointResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cruiser_msgs::JointResult_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "errCode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.errCode);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joints[i]);
    }
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "jointIndex[]" << std::endl;
    for (size_t i = 0; i < v.jointIndex.size(); ++i)
    {
      s << indent << "  jointIndex[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.jointIndex[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.speed[i]);
    }
    s << indent << "duration[]" << std::endl;
    for (size_t i = 0; i < v.duration.size(); ++i)
    {
      s << indent << "  duration[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.duration[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUISER_MSGS_MESSAGE_JOINTRESULT_H
