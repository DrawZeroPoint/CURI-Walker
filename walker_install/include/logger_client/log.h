// Generated by gencpp from file logger_client/log.msg
// DO NOT EDIT!


#ifndef LOGGER_CLIENT_MESSAGE_LOG_H
#define LOGGER_CLIENT_MESSAGE_LOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace logger_client
{
template <class ContainerAllocator>
struct log_
{
  typedef log_<ContainerAllocator> Type;

  log_()
    : level()
    , time(0)
    , time_us(0)
    , node()
    , file()
    , function()
    , line(0)
    , content()  {
    }
  log_(const ContainerAllocator& _alloc)
    : level(_alloc)
    , time(0)
    , time_us(0)
    , node(_alloc)
    , file(_alloc)
    , function(_alloc)
    , line(0)
    , content(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _level_type;
  _level_type level;

   typedef int64_t _time_type;
  _time_type time;

   typedef int64_t _time_us_type;
  _time_us_type time_us;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_type;
  _node_type node;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_type;
  _file_type file;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_type;
  _function_type function;

   typedef int32_t _line_type;
  _line_type line;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _content_type;
  _content_type content;





  typedef boost::shared_ptr< ::logger_client::log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::logger_client::log_<ContainerAllocator> const> ConstPtr;

}; // struct log_

typedef ::logger_client::log_<std::allocator<void> > log;

typedef boost::shared_ptr< ::logger_client::log > logPtr;
typedef boost::shared_ptr< ::logger_client::log const> logConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::logger_client::log_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::logger_client::log_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::logger_client::log_<ContainerAllocator1> & lhs, const ::logger_client::log_<ContainerAllocator2> & rhs)
{
  return lhs.level == rhs.level &&
    lhs.time == rhs.time &&
    lhs.time_us == rhs.time_us &&
    lhs.node == rhs.node &&
    lhs.file == rhs.file &&
    lhs.function == rhs.function &&
    lhs.line == rhs.line &&
    lhs.content == rhs.content;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::logger_client::log_<ContainerAllocator1> & lhs, const ::logger_client::log_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace logger_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::logger_client::log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::logger_client::log_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::logger_client::log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::logger_client::log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::logger_client::log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::logger_client::log_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::logger_client::log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7212572e30c271c75a76de908bf7c5bc";
  }

  static const char* value(const ::logger_client::log_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7212572e30c271c7ULL;
  static const uint64_t static_value2 = 0x5a76de908bf7c5bcULL;
};

template<class ContainerAllocator>
struct DataType< ::logger_client::log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "logger_client/log";
  }

  static const char* value(const ::logger_client::log_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::logger_client::log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string level\n"
"int64 time\n"
"int64 time_us\n"
"string node\n"
"string file\n"
"string function\n"
"int32 line\n"
"string content\n"
;
  }

  static const char* value(const ::logger_client::log_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::logger_client::log_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.level);
      stream.next(m.time);
      stream.next(m.time_us);
      stream.next(m.node);
      stream.next(m.file);
      stream.next(m.function);
      stream.next(m.line);
      stream.next(m.content);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct log_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::logger_client::log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::logger_client::log_<ContainerAllocator>& v)
  {
    s << indent << "level: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.level);
    s << indent << "time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time);
    s << indent << "time_us: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time_us);
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node);
    s << indent << "file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file);
    s << indent << "function: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function);
    s << indent << "line: ";
    Printer<int32_t>::stream(s, indent + "  ", v.line);
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.content);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOGGER_CLIENT_MESSAGE_LOG_H
