; Auto-generated. Do not edit!


(cl:in-package ces_task-msg)


;//! \htmlinclude TaskArmStatus.msg.html

(cl:defclass <TaskArmStatus> (roslisp-msg-protocol:ros-message)
  ((header
    :reader header
    :initarg :header
    :type std_msgs-msg:Header
    :initform (cl:make-instance 'std_msgs-msg:Header))
   (task_id
    :reader task_id
    :initarg :task_id
    :type cl:string
    :initform "")
   (demander
    :reader demander
    :initarg :demander
    :type cl:string
    :initform "")
   (executor
    :reader executor
    :initarg :executor
    :type cl:string
    :initform "")
   (task_status
    :reader task_status
    :initarg :task_status
    :type cl:string
    :initform "")
   (process_info
    :reader process_info
    :initarg :process_info
    :type cl:string
    :initform ""))
)

(cl:defclass TaskArmStatus (<TaskArmStatus>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <TaskArmStatus>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'TaskArmStatus)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name ces_task-msg:<TaskArmStatus> is deprecated: use ces_task-msg:TaskArmStatus instead.")))

(cl:ensure-generic-function 'header-val :lambda-list '(m))
(cl:defmethod header-val ((m <TaskArmStatus>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ces_task-msg:header-val is deprecated.  Use ces_task-msg:header instead.")
  (header m))

(cl:ensure-generic-function 'task_id-val :lambda-list '(m))
(cl:defmethod task_id-val ((m <TaskArmStatus>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ces_task-msg:task_id-val is deprecated.  Use ces_task-msg:task_id instead.")
  (task_id m))

(cl:ensure-generic-function 'demander-val :lambda-list '(m))
(cl:defmethod demander-val ((m <TaskArmStatus>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ces_task-msg:demander-val is deprecated.  Use ces_task-msg:demander instead.")
  (demander m))

(cl:ensure-generic-function 'executor-val :lambda-list '(m))
(cl:defmethod executor-val ((m <TaskArmStatus>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ces_task-msg:executor-val is deprecated.  Use ces_task-msg:executor instead.")
  (executor m))

(cl:ensure-generic-function 'task_status-val :lambda-list '(m))
(cl:defmethod task_status-val ((m <TaskArmStatus>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ces_task-msg:task_status-val is deprecated.  Use ces_task-msg:task_status instead.")
  (task_status m))

(cl:ensure-generic-function 'process_info-val :lambda-list '(m))
(cl:defmethod process_info-val ((m <TaskArmStatus>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ces_task-msg:process_info-val is deprecated.  Use ces_task-msg:process_info instead.")
  (process_info m))
(cl:defmethod roslisp-msg-protocol:symbol-codes ((msg-type (cl:eql '<TaskArmStatus>)))
    "Constants for message type '<TaskArmStatus>"
  '((:OWNER_NONE . none)
    (:OWNER_SDK . sdk)
    (:OWNER_LEGS . legs)
    (:OWNER_ARMS . arms)
    (:OWNER_REMOTER . remoter)
    (:OWNER_HOST . host)
    (:TASK_GREETINGS . CES/cesGreetings)
    (:TASK_HANDSHAKE . function/functionHybirdEffort)
    (:TASK_STANDBY . walk/walkDynamic)
    (:TASK_CHARGE . CES/cesRecharge)
    (:TASK_SWINGWHILEWALKE . walk/walkDynamic)
    (:TASK_WALKINHAND . walk/walkDynamicWithHand)
    (:TASK_DANCE . function/functionDance)
    (:TASK_ENDPOINTCTRL . function/functionEndpointControl)
    (:TASK_HYBIRDTRQCTRL . function/functionHybirdEffort)
    (:TASK_HYBIRDPOSCTRL . function/functionHybirdPosition)
    (:TASK_NULLSPACECTRL . function/functionNullspaceControl)
    (:TASK_VISUALSERVO . function/functionVisualServo)
    (:TASK_WHOLEBODYCTRL . function/functionWholeBodyControl)
    (:TASK_DRAWING . function/functionDrawing)
    (:TASK_SAYGOODBYE . CES/cesSayGoodbye)
    (:TASK_OPENDOOR . CES/ces100OpenDoor)
    (:TASK_GETBAG . CES/cesPickBag)
    (:TASK_HANGBAG . CES/ces101PlaceBag)
    (:TASK_GETWATER . CES/ces102OpenRefrigerator)
    (:TASK_PLACEWATER . CES/ces104PlaceWater)
    (:TASK_WALKWITHWATER . walk/walkDynamic)
    (:TASK_GETFOOD . CES/ces103PickChips)
    (:TASK_WALKWITHFOOD . walk/walkDynamic)
    (:TASK_GIVEFOOD . CES/cesDeliveryChips)
    (:TASK_RELEASEFOOD . CES/cesReleaseChips)
    (:TASK_GETUMBRELLA . CES/ces105PickUmbrella)
    (:TASK_GIVEUMBRELLA . CES/cesDeliveryUmbrella)
    (:TASK_RELEASEUMBRELLA . CES/cesReleaseUmbrella)
    (:TASK_STATUS_IDLE . idle)
    (:TASK_STATUS_BUSY . busy)
    (:TASK_STATUS_STOP . stopped)
    (:TASK_STATUS_ABORT . abort)
    (:TASK_STATUS_FAILED . fail))
)
(cl:defmethod roslisp-msg-protocol:symbol-codes ((msg-type (cl:eql 'TaskArmStatus)))
    "Constants for message type 'TaskArmStatus"
  '((:OWNER_NONE . none)
    (:OWNER_SDK . sdk)
    (:OWNER_LEGS . legs)
    (:OWNER_ARMS . arms)
    (:OWNER_REMOTER . remoter)
    (:OWNER_HOST . host)
    (:TASK_GREETINGS . CES/cesGreetings)
    (:TASK_HANDSHAKE . function/functionHybirdEffort)
    (:TASK_STANDBY . walk/walkDynamic)
    (:TASK_CHARGE . CES/cesRecharge)
    (:TASK_SWINGWHILEWALKE . walk/walkDynamic)
    (:TASK_WALKINHAND . walk/walkDynamicWithHand)
    (:TASK_DANCE . function/functionDance)
    (:TASK_ENDPOINTCTRL . function/functionEndpointControl)
    (:TASK_HYBIRDTRQCTRL . function/functionHybirdEffort)
    (:TASK_HYBIRDPOSCTRL . function/functionHybirdPosition)
    (:TASK_NULLSPACECTRL . function/functionNullspaceControl)
    (:TASK_VISUALSERVO . function/functionVisualServo)
    (:TASK_WHOLEBODYCTRL . function/functionWholeBodyControl)
    (:TASK_DRAWING . function/functionDrawing)
    (:TASK_SAYGOODBYE . CES/cesSayGoodbye)
    (:TASK_OPENDOOR . CES/ces100OpenDoor)
    (:TASK_GETBAG . CES/cesPickBag)
    (:TASK_HANGBAG . CES/ces101PlaceBag)
    (:TASK_GETWATER . CES/ces102OpenRefrigerator)
    (:TASK_PLACEWATER . CES/ces104PlaceWater)
    (:TASK_WALKWITHWATER . walk/walkDynamic)
    (:TASK_GETFOOD . CES/ces103PickChips)
    (:TASK_WALKWITHFOOD . walk/walkDynamic)
    (:TASK_GIVEFOOD . CES/cesDeliveryChips)
    (:TASK_RELEASEFOOD . CES/cesReleaseChips)
    (:TASK_GETUMBRELLA . CES/ces105PickUmbrella)
    (:TASK_GIVEUMBRELLA . CES/cesDeliveryUmbrella)
    (:TASK_RELEASEUMBRELLA . CES/cesReleaseUmbrella)
    (:TASK_STATUS_IDLE . idle)
    (:TASK_STATUS_BUSY . busy)
    (:TASK_STATUS_STOP . stopped)
    (:TASK_STATUS_ABORT . abort)
    (:TASK_STATUS_FAILED . fail))
)
(cl:defmethod roslisp-msg-protocol:serialize ((msg <TaskArmStatus>) ostream)
  "Serializes a message object of type '<TaskArmStatus>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)
  (cl:let ((__ros_str_len (cl:length (cl:slot-value msg 'task_id))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_str_len) ostream))
  (cl:map cl:nil #'(cl:lambda (c) (cl:write-byte (cl:char-code c) ostream)) (cl:slot-value msg 'task_id))
  (cl:let ((__ros_str_len (cl:length (cl:slot-value msg 'demander))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_str_len) ostream))
  (cl:map cl:nil #'(cl:lambda (c) (cl:write-byte (cl:char-code c) ostream)) (cl:slot-value msg 'demander))
  (cl:let ((__ros_str_len (cl:length (cl:slot-value msg 'executor))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_str_len) ostream))
  (cl:map cl:nil #'(cl:lambda (c) (cl:write-byte (cl:char-code c) ostream)) (cl:slot-value msg 'executor))
  (cl:let ((__ros_str_len (cl:length (cl:slot-value msg 'task_status))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_str_len) ostream))
  (cl:map cl:nil #'(cl:lambda (c) (cl:write-byte (cl:char-code c) ostream)) (cl:slot-value msg 'task_status))
  (cl:let ((__ros_str_len (cl:length (cl:slot-value msg 'process_info))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_str_len) ostream))
  (cl:map cl:nil #'(cl:lambda (c) (cl:write-byte (cl:char-code c) ostream)) (cl:slot-value msg 'process_info))
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <TaskArmStatus>) istream)
  "Deserializes a message object of type '<TaskArmStatus>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)
    (cl:let ((__ros_str_len 0))
      (cl:setf (cl:ldb (cl:byte 8 0) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'task_id) (cl:make-string __ros_str_len))
      (cl:dotimes (__ros_str_idx __ros_str_len msg)
        (cl:setf (cl:char (cl:slot-value msg 'task_id) __ros_str_idx) (cl:code-char (cl:read-byte istream)))))
    (cl:let ((__ros_str_len 0))
      (cl:setf (cl:ldb (cl:byte 8 0) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'demander) (cl:make-string __ros_str_len))
      (cl:dotimes (__ros_str_idx __ros_str_len msg)
        (cl:setf (cl:char (cl:slot-value msg 'demander) __ros_str_idx) (cl:code-char (cl:read-byte istream)))))
    (cl:let ((__ros_str_len 0))
      (cl:setf (cl:ldb (cl:byte 8 0) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'executor) (cl:make-string __ros_str_len))
      (cl:dotimes (__ros_str_idx __ros_str_len msg)
        (cl:setf (cl:char (cl:slot-value msg 'executor) __ros_str_idx) (cl:code-char (cl:read-byte istream)))))
    (cl:let ((__ros_str_len 0))
      (cl:setf (cl:ldb (cl:byte 8 0) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'task_status) (cl:make-string __ros_str_len))
      (cl:dotimes (__ros_str_idx __ros_str_len msg)
        (cl:setf (cl:char (cl:slot-value msg 'task_status) __ros_str_idx) (cl:code-char (cl:read-byte istream)))))
    (cl:let ((__ros_str_len 0))
      (cl:setf (cl:ldb (cl:byte 8 0) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'process_info) (cl:make-string __ros_str_len))
      (cl:dotimes (__ros_str_idx __ros_str_len msg)
        (cl:setf (cl:char (cl:slot-value msg 'process_info) __ros_str_idx) (cl:code-char (cl:read-byte istream)))))
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<TaskArmStatus>)))
  "Returns string type for a message object of type '<TaskArmStatus>"
  "ces_task/TaskArmStatus")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'TaskArmStatus)))
  "Returns string type for a message object of type 'TaskArmStatus"
  "ces_task/TaskArmStatus")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<TaskArmStatus>)))
  "Returns md5sum for a message object of type '<TaskArmStatus>"
  "e37a2b08a580018c6dc8764166a54283")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'TaskArmStatus)))
  "Returns md5sum for a message object of type 'TaskArmStatus"
  "e37a2b08a580018c6dc8764166a54283")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<TaskArmStatus>)))
  "Returns full string definition for message of type '<TaskArmStatus>"
  (cl:format cl:nil "# owner ids~%string OWNER_NONE=none~%string OWNER_SDK=sdk~%string OWNER_LEGS=legs~%string OWNER_ARMS=arms~%string OWNER_REMOTER=remoter~%string OWNER_HOST=host~%~%~%# task ids~%## common task~%string TASK_GREETINGS=CES/cesGreetings~%string TASK_HANDSHAKE=function/functionHybirdEffort~%string TASK_STANDBY=walk/walkDynamic~%string TASK_CHARGE=CES/cesRecharge~%string TASK_SWINGWHILEWALKE=walk/walkDynamic~%string TASK_WALKINHAND=walk/walkDynamicWithHand~%string TASK_DANCE=function/functionDance~%string TASK_ENDPOINTCTRL=function/functionEndpointControl~%string TASK_HYBIRDTRQCTRL=function/functionHybirdEffort~%string TASK_HYBIRDPOSCTRL=function/functionHybirdPosition~%string TASK_NULLSPACECTRL=function/functionNullspaceControl~%string TASK_VISUALSERVO=function/functionVisualServo~%string TASK_WHOLEBODYCTRL=function/functionWholeBodyControl~%string TASK_DRAWING=function/functionDrawing~%string TASK_SAYGOODBYE=CES/cesSayGoodbye~%~%## open door task~%string TASK_OPENDOOR=CES/ces100OpenDoor~%~%## handle bag task~%string TASK_GETBAG=CES/cesPickBag~%string TASK_HANGBAG=CES/ces101PlaceBag~%~%## get water task~%string TASK_GETWATER=CES/ces102OpenRefrigerator~%string TASK_PLACEWATER=CES/ces104PlaceWater~%string TASK_WALKWITHWATER=walk/walkDynamic~%~%## get food task~%string TASK_GETFOOD=CES/ces103PickChips~%string TASK_WALKWITHFOOD=walk/walkDynamic~%string TASK_GIVEFOOD=CES/cesDeliveryChips~%string TASK_RELEASEFOOD=CES/cesReleaseChips~%~%## get umbrella task~%string TASK_GETUMBRELLA=CES/ces105PickUmbrella~%string TASK_GIVEUMBRELLA=CES/cesDeliveryUmbrella~%string TASK_RELEASEUMBRELLA=CES/cesReleaseUmbrella~%~%~%# task status defines~%string TASK_STATUS_IDLE=idle~%string TASK_STATUS_BUSY=busy~%string TASK_STATUS_STOP=stopped~%string TASK_STATUS_ABORT=abort~%string TASK_STATUS_FAILED=fail~%~%##############################################~%~%# time stamp must be filled~%Header header~%~%# current task id~%string task_id~%~%# who send request~%string demander~%~%# who execute task~%string executor~%~%# current status~%string task_status~%~%# progress info(optional)~%string process_info~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'TaskArmStatus)))
  "Returns full string definition for message of type 'TaskArmStatus"
  (cl:format cl:nil "# owner ids~%string OWNER_NONE=none~%string OWNER_SDK=sdk~%string OWNER_LEGS=legs~%string OWNER_ARMS=arms~%string OWNER_REMOTER=remoter~%string OWNER_HOST=host~%~%~%# task ids~%## common task~%string TASK_GREETINGS=CES/cesGreetings~%string TASK_HANDSHAKE=function/functionHybirdEffort~%string TASK_STANDBY=walk/walkDynamic~%string TASK_CHARGE=CES/cesRecharge~%string TASK_SWINGWHILEWALKE=walk/walkDynamic~%string TASK_WALKINHAND=walk/walkDynamicWithHand~%string TASK_DANCE=function/functionDance~%string TASK_ENDPOINTCTRL=function/functionEndpointControl~%string TASK_HYBIRDTRQCTRL=function/functionHybirdEffort~%string TASK_HYBIRDPOSCTRL=function/functionHybirdPosition~%string TASK_NULLSPACECTRL=function/functionNullspaceControl~%string TASK_VISUALSERVO=function/functionVisualServo~%string TASK_WHOLEBODYCTRL=function/functionWholeBodyControl~%string TASK_DRAWING=function/functionDrawing~%string TASK_SAYGOODBYE=CES/cesSayGoodbye~%~%## open door task~%string TASK_OPENDOOR=CES/ces100OpenDoor~%~%## handle bag task~%string TASK_GETBAG=CES/cesPickBag~%string TASK_HANGBAG=CES/ces101PlaceBag~%~%## get water task~%string TASK_GETWATER=CES/ces102OpenRefrigerator~%string TASK_PLACEWATER=CES/ces104PlaceWater~%string TASK_WALKWITHWATER=walk/walkDynamic~%~%## get food task~%string TASK_GETFOOD=CES/ces103PickChips~%string TASK_WALKWITHFOOD=walk/walkDynamic~%string TASK_GIVEFOOD=CES/cesDeliveryChips~%string TASK_RELEASEFOOD=CES/cesReleaseChips~%~%## get umbrella task~%string TASK_GETUMBRELLA=CES/ces105PickUmbrella~%string TASK_GIVEUMBRELLA=CES/cesDeliveryUmbrella~%string TASK_RELEASEUMBRELLA=CES/cesReleaseUmbrella~%~%~%# task status defines~%string TASK_STATUS_IDLE=idle~%string TASK_STATUS_BUSY=busy~%string TASK_STATUS_STOP=stopped~%string TASK_STATUS_ABORT=abort~%string TASK_STATUS_FAILED=fail~%~%##############################################~%~%# time stamp must be filled~%Header header~%~%# current task id~%string task_id~%~%# who send request~%string demander~%~%# who execute task~%string executor~%~%# current status~%string task_status~%~%# progress info(optional)~%string process_info~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <TaskArmStatus>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))
     4 (cl:length (cl:slot-value msg 'task_id))
     4 (cl:length (cl:slot-value msg 'demander))
     4 (cl:length (cl:slot-value msg 'executor))
     4 (cl:length (cl:slot-value msg 'task_status))
     4 (cl:length (cl:slot-value msg 'process_info))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <TaskArmStatus>))
  "Converts a ROS message object to a list"
  (cl:list 'TaskArmStatus
    (cl:cons ':header (header msg))
    (cl:cons ':task_id (task_id msg))
    (cl:cons ':demander (demander msg))
    (cl:cons ':executor (executor msg))
    (cl:cons ':task_status (task_status msg))
    (cl:cons ':process_info (process_info msg))
))
